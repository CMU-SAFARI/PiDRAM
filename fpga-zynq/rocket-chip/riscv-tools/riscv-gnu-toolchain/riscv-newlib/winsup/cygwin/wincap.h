/* wincap.h: Header for OS capability class.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _WINCAP_H
#define _WINCAP_H

struct wincaps
{
  DWORD def_guard_pages;
  /* The bitfields must be 8 byte aligned on x86_64, otherwise the bitfield
     ops generated by gcc are off by 4 bytes. */
  struct  __attribute__ ((aligned (8))) {
    unsigned is_server				: 1;
    unsigned needs_count_in_si_lpres2		: 1;
    unsigned has_gaa_largeaddress_bug		: 1;
    unsigned has_broken_alloc_console		: 1;
    unsigned has_console_logon_sid		: 1;
    unsigned has_precise_system_time		: 1;
    unsigned has_microsoft_accounts		: 1;
    unsigned has_processor_groups		: 1;
    unsigned has_broken_prefetchvm		: 1;
    unsigned has_new_pebteb_region		: 1;
    unsigned has_broken_whoami			: 1;
  };
};

class wincapc
{
  SYSTEM_INFO		system_info;
  RTL_OSVERSIONINFOEXW	version;
  char			osnam[40];
  ULONG_PTR		wow64;
  void			*caps;

public:
  void init ();

  const DWORD cpu_count () const { return system_info.dwNumberOfProcessors; }
  /* The casts to size_t make sure that the returned value has the size of
     a pointer on any system.  This is important when using them for bit
     mask operations, like in roundup2. */
  const size_t page_size () const { return (size_t) system_info.dwPageSize; }
  const size_t allocation_granularity () const
		     { return (size_t) system_info.dwAllocationGranularity; }
  const char *osname () const { return osnam; }
  const bool is_wow64 () const { return !!wow64; }

#define IMPLEMENT(cap) cap() const { return ((wincaps *) this->caps)->cap; }

  DWORD def_guard_page_size () const
  {
    return ((wincaps *) this->caps)->def_guard_pages * page_size ();
  }
  bool  IMPLEMENT (is_server)
  bool	IMPLEMENT (needs_count_in_si_lpres2)
  bool	IMPLEMENT (has_gaa_largeaddress_bug)
  bool	IMPLEMENT (has_broken_alloc_console)
  bool	IMPLEMENT (has_console_logon_sid)
  bool	IMPLEMENT (has_precise_system_time)
  bool	IMPLEMENT (has_microsoft_accounts)
  bool	IMPLEMENT (has_processor_groups)
  bool	IMPLEMENT (has_broken_prefetchvm)
  bool	IMPLEMENT (has_new_pebteb_region)
  bool	IMPLEMENT (has_broken_whoami)

#undef IMPLEMENT
};

extern wincapc wincap;

#endif /* _WINCAP_H */
