\input texinfo
@setfilename dejagnu.info
@documentencoding us-ascii
@settitle DejaGnu
@dircategory Programming
@direntry
* DejaGnu: (dejagnu).           The GNU testing framework.
@end direntry

@node Top, Introduction, , (dir)
@top DejaGnu

@ifnottex
This file documents DejaGnu version 1.6.

@insertcopying
@end ifnottex

@menu
* Introduction::
* Running tests::
* Customizing DejaGnu::
* Extending DejaGnu::
* Unit testing::
* Reference::

@detailmenu

Introduction

* What is DejaGnu?::
* New in this release: Release Notes
* Design goals::
* A POSIX conforming test framework: A POSIX Conforming Test Framework.
* Installation::

Running tests

* Running 'make check': Make Check.
* Running runtest: Runtest.
* Output files: Output Files.

Customizing DejaGnu

* Global config file::
* Local config file::
* Board config file::
* Remote host testing::
* Config file values::

Extending DejaGnu

* Adding a new testsuite::
* Adding a new tool::
* Adding a new target::
* Adding a new board::
* Board file values::
* Writing a test case::
* Debugging a test case::
* Adding a test case to a testsuite::
* Test case special variables: Test case variables.

Unit testing

* What is unit testing?::
* The dejagnu.h header file: The dejagnu_h header file.
* C unit testing API::
* C++ unit testing API::

Reference

* Builtin Procedures::

@end detailmenu
@end menu

@node Introduction, Running tests, Top, Top
@chapter Introduction

@menu
* What is DejaGnu?::
* New in this release: Release Notes.
* Design goals::
* A POSIX compliant test framework: A POSIX Conforming Test Framework.
* Installation::
@end menu

@node What is DejaGnu?, Release Notes, , Introduction
@section What is DejaGnu?

DejaGnu is a framework for testing other programs, providing a single
front-end for all tests. You can think of it as a library of Tcl
procedures to help with writing a test harness. A @emph{test harness} is
the infrastructure that is created to test a specific program or
tool. Each program can have multiple testsuites, all supported by a
single test harness. DejaGnu is written in Expect, which in turn uses
Tcl, the Tool command language. There is more information on Tcl at the
@uref{http://www.tcl.tk,Tcl/Tk web site} and the
@uref{http://expect.nist.gov,Expect web site}.

Julia Menapace first coined the term @emph{DejaGnu} to describe an
earlier testing framework she wrote at Cygnus Support for testing
GDB. When we replaced it with the Expect-based framework, it was like
DejaGnu all over again.  More importantly, it was also named after my
daughter, Deja Snow Savoye, who was a toddler during DejaGnu's
beginnings.

DejaGnu offers several advantages for testing:

@itemize 

@item
The flexibility and consistency of the DejaGnu framework make it easy to
write tests for any program, with either batch-oriented, or interactive
programs.

@item
DejaGnu provides a layer of abstraction which allows you to write tests
that are portable to any host or target where a program must be
tested. For instance, a test for @code{GDB} can run from any supported
host system on any supported target system. DejaGnu runs tests on many
single board computers, whose operating software ranges from a simple
boot monitor to a real-time OS.

@item
All tests have the same output format. This makes it easy to integrate
testing into other software development processes. DejaGnu's output is
designed to be parsed by other filtering script and it is also human
readable.

@item
Using Tcl and Expect, it's easy to create wrappers for existing
testsuites. By incorporating existing tests under DejaGnu, it's easier
to have a single set of report analyse programs..
@end itemize

Running tests requires two things: the testing framework and the
testsuites themselves. Tests are usually written in Expect using Tcl,
but you can also use a Tcl script to run a testsuite that is not based
on Expect. Expect script filenames conventionally use @file{.exp} as a
suffix. For example, the main implementation of the DejaGnu test driver
is in the file @file{runtest.exp}.

@node Release Notes, Design goals, What is DejaGnu?, Introduction
@section New in this release

The following major, user-visible changes have been introduced since
version 1.5.3.

@enumerate

@item
Support for target communication via SSH has been added.

@item
A large number of very old config and baseboard files have been
   removed. If you need to resurrect these, you can get them from
   version 1.5.3.  If you can show that a board is still in use, it can
   be put back in the distribution.

@item
The @command{--status} command line option is now the default. This
   means that any error in the testsuite Tcl scripts will cause runtest
   to abort with exit status code 2. The @command{--status} option has
   been removed from the documentation, but will continue to be accepted
   for backward compatibility.

@item
@command{runtest} now exits with exit code 0 if the testsuite "passed",
   1 if something unexpected happened (eg, FAIL, XPASS or UNRESOLVED),
   and 2 if an exception is raised by the Tcl interpreter.

@item
@command{runtest} now exits with the standard exit codes of programs that
   are terminated by the SIGINT, SIGTERM and SIGQUIT signals.

@item
The user-visible utility procedures @code{absolute}, @code{psource} and
   @code{slay} have been removed.  If a testsuite uses any of these
   procedures, a copy of the procedure should be made and placed in the
   lib directory of the testsuite.

@item
Support was added for testing the D compiler.

@item
@file{~/.dejagnurc} is now loaded last, not first. This allows the user
   to have the ability to override anything in their environment (even
   the @file{site.exp} file specified by @code{$DEJAGNU}).

@item
The user-visible utility procedure @code{unsetenv} is
   @strong{deprecated} and will be removed in the next release.  If a
   testsuite uses this procedure, a copy should be made and placed in
   the lib directory of the testsuite.

@end enumerate

@node Design goals, A POSIX Conforming Test Framework, Release Notes, Introduction
@section Design goals

DejaGnu grew out of the internal needs of Cygnus Solutions (formerly
Cygnus Support). Cygnus maintained and enhanced a variety of free
programs in many different environments and needed a testing tool that:

@itemize 

@item
was useful to developers while fixing bugs;

@item
automated running many tests during a software release process;

@item
was portable among a variety of host computers;

@item
supported a cross-development environment;

@item
permitted testing of interactive programs like @code{GDB}; and

@item
permitted testing of batch-oriented programs like @code{GCC}.
@end itemize

Some of the requirements proved challenging.  For example, interactive
programs do not lend themselves very well to automated testing.  But all
the requirements are important. For instance, it is imperative to make
sure that @code{GDB} works as well when cross-debugging as it does in a
native configuration.

Probably the greatest challenge was testing in a cross-development
environment.  Most cross-development environments are customized by each
developer.  Even when buying packaged boards from vendors there are many
differences.  The communication interfaces vary from a serial line to
Ethernet.  DejaGnu was designed with a modular communication setup, so
that each kind of communication can be added as required and supported
thereafter.  Once a communication procedure is written, any test can use
it.  Currently DejaGnu can use @code{ssh}, @code{rsh}, @code{rlogin},
@code{telnet}, @code{tip}, and @code{kermit} for remote communications.

@node A POSIX Conforming Test Framework, Installation, Design goals, Introduction
@section A POSIX compliant test framework

DejaGnu conforms to the POSIX 1003.3 standard for test frameworks. Rob
Savoye was a member of that committee.

POSIX standard 1003.3 defines what a testing framework needs to provide
to create a POSIX compliant testsuite. This standard is primarily
oriented to checking POSIX conformance, but its requirements also
support testing of features not related to POSIX conformance.  POSIX
1003.3 does not specify a particular testing framework, but at this time
there is only one other POSIX conforming test framework. TET was created
by Unisoft for a consortium comprised of X/Open, Unix International and
the Open Software Foundation.

The POSIX documentation refers to @dfn{assertions}.  An assertion is a
description of behavior.  For example, if a standard says ``The sun
shall shine'', a corresponding assertion might be ``The sun is
shining.''  A test based on this assertion would pass or fail depending
on whether it is day or night.  It is important to note that the
standard being tested is never 1003.3; the standard being tested is some
other standard, for which the assertions were written.

As there is no testsuite to verify that testing frameworks are POSIX
1003.3 compliant, this is done by repeatedly reading the standard and
experimenting.  One of the main things POSIX 1003.3 does specify is the
set of allowed output messages and their definitions.  Four messages are
supported for a required feature of POSIX conforming systems and a fifth
for a conditional feature. DejaGnu supports all five output messages.
In this sense a testsuite that uses exactly these messages can be
considered POSIX compliant.  These definitions specify the output of a
test case:

@table @asis

@item PASS
A test has succeeded.  That is, it demonstrated that the assertion is
true.

@item FAIL
A test has not succeeded -- the assertion is false.  The @emph{FAIL}
message is based on this test case only.  Other messages are used to
indicate a failure of the framework. As with @emph{PASS}, POSIX tests
must return @emph{FAIL} rather than @emph{XFAIL} even if a failure was
expected.

@item XFAIL
POSIX 1003.3 does not incorporate the notion of expected failures, so
@emph{PASS}, instead of @emph{XPASS}, must also be returned for test
cases which were expected to fail and did not.  This means that
@emph{PASS} is in some sense more ambiguous than if @emph{XPASS} is also
used.

@item UNRESOLVED
A test produced indeterminate results.  Usually, this means the test
executed in an unexpected fashion. This outcome requires a human to go
over results to determine if the test should have passed or failed.
This message is also used for any test that requires human intervention
because it is beyond the abilities of the testing framework.  Any
unresolved test should resolved to @emph{PASS} or @emph{FAIL} before a
test run can be considered finished.

Note that for POSIX, each assertion must produce a test result code.  If
the test isn't actually run, it must produce @emph{UNRESOLVED} rather
than just leaving that test out of the output.  This means that you have
to be careful when writing tests to not carelessly use Tcl commands like
@emph{return}---if you alter the flow of control of the Tcl code you
must insure that every test still produces some result code.

Here are some of the ways a test may wind up
@emph{UNRESOLVED}:
@end table

@itemize 

@item
Execution of a test is interrupted.

@item
A test does not produce a clear result. This is usually because there
was an @emph{ERROR} from DejaGnu while processing the test, or because
there were three or more @emph{WARNING} messages. Any @emph{WARNING} or
@emph{ERROR} messages can invalidate the output of the test.  This
usually requires a human to examine the output to determine what really
happened -- and to improve the test case.

@item
A test depends on a previous test, which has failed.

@item
The test was set up incorrectly.
@end itemize

@table @asis

@item UNTESTED
A test was not run.  This is a placeholder used when there is no real
test case yet.
@end table

@table @asis

@item UNSUPPORTED
There is no support for the tested case.  This may mean that a
conditional feature of an operating system, or of a compiler, is not
implemented.  DejaGnu also uses this message when a testing environment
(often a ``bare board'' target) lacks basic support for compiling or
running the test case.  For example, a test for the system subroutine
@emph{gethostname} would never work on a target board running only a
boot monitor.
@end table

DejaGnu uses the same output procedures to produce these messages for
all testsuites and these procedures are already known to conform to
POSIX 1003.3.  For a DejaGnu testsuite to conform to POSIX 1003.3, you
must avoid the @emph{setup_xfail} procedure as described in the
@emph{PASS} section above and you must be careful to return
@emph{UNRESOLVED} where appropriate, as described in the
@emph{UNRESOLVED} section above.

@node Installation, , A POSIX Conforming Test Framework, Introduction
@section Installation

Refer to the @file{INSTALL} in the source distribution for detailed
installation instructions.  Note that there is no compilation step as
with many other GNU packages, as DejaGnu consists of interpreted code
only.

Save for its own small testsuite, the DejaGnu distribution does not
include any testsuites. Testsuites for the various GNU development tools
are included with those packages. After configuring the top-level
DejaGnu directory, unpack and configure the test directories for the
tools you want to test; then, in each test directory, run @emph{make
check} to build auxiliary programs required by some of the tests, and
run the test suites.

@node Running tests, Customizing DejaGnu, Introduction, Top
@chapter Running tests

There are two ways to execute a testsuite. The most common way is when
there is existing support in the @file{Makefile} of the tool being
tested. This usually consists of a @emph{check} target. The other way is
to execute the @code{runtest} program directly. To run @code{runtest}
directly from the command line requires either all of the correct
command line options, or a @ref{Local config file} must be set up
correctly.

@menu
* Running 'make check': Make Check.
* Running runtest: Runtest.
* Output files: Output Files.
@end menu

@node Make Check, Runtest, , Running tests
@section Running 'make check'

To run tests from an existing collection, first use @code{configure} as
usual to set up the build directory. Then type @code{make check}.  If
the @emph{check} target exists, it usually saves you some trouble. For
instance, it can set up any auxiliary programs or other files needed by
the tests. The most common file the @emph{check} target depends on is
the @file{site.exp} file. The @file{site.exp} contains various variables
that DejaGnu uses to determine the configuration of the program being
tested.

Once you have run @emph{make check} to build any auxiliary files, you
can invoke the test driver @code{runtest} directly to repeat the tests.
You will also have to execute @code{runtest} directly for test
collections with no @emph{check} target in the @file{Makefile}.

GNU Automake has built-in support for DejaGnu.  To add DejaGnu support
to your generated @file{Makefile.in}, just add the keyword
@code{dejagnu} to the AUTOMAKE_OPTIONS variable in
@file{Makefile.am}. This will ensure that the generated
@file{Makefile.in} has a @code{check} target that invokes DejaGnu
correctly.

@node Runtest, Output Files, Make Check, Running tests
@section Running runtest

@code{runtest} is the test driver for DejaGnu. You can specify two kinds
of things on the @code{runtest} command line: command line options, and
Tcl variables that are passed to the test scripts. The options are
listed alphabetically below.

@code{runtest} returns one of the following exit codes:

@table @asis
@item 0
if all tests passed including expected failures and unsupported tests.
@item 1
if any test failed, passed unexpectedly, or was unresolved.
@item 2
if Expect encountered any error in the test scripts.
@end table

@menu
* Output States::
* Invoking runtest::
* Common Options: Common Operations.
@end menu

@node Output States, Invoking runtest, , Runtest
@subsection Output States

@file{runtest} flags the outcome of each test as one of these cases. See
@ref{A POSIX Conforming Test Framework} for a discussion of how POSIX
specifies the meanings of these cases.

@table @asis

@item PASS
The most desirable outcome: the test was expected to succeed and did
succeed.

@item XPASS
A pleasant kind of failure: a test was expected to fail, but
succeeded. This may indicate progress; inspect the test case to
determine whether you should amend it to stop expecting failure.

@item FAIL
A test failed, although it was expected to succeed.  This may indicate
regress; inspect the test case and the failing software to locate the
bug.

@item XFAIL
A test failed, but it was expected to fail.  This result indicates no
change in a known bug.  If a test fails because the operating system
where the test runs lacks some facility required by the test, the
outcome is @emph{UNSUPPORTED} instead.

@item UNRESOLVED
Output from a test requires manual inspection; the testsuite could not
automatically determine the outcome.  For example, your tests can report
this outcome is when a test does not complete as expected.

@item UNTESTED
A test case is not yet complete, and in particular cannot yet produce a
@emph{PASS} or @emph{FAIL}. You can also use this outcome in dummy
``tests'' that note explicitly the absence of a real test case for a
particular property.

@item UNSUPPORTED
A test depends on a conditionally available feature that does not exist
(in the configured testing environment).  For example, you can use this
outcome to report on a test case that does not work on a particular
target because its operating system support does not include a required
subroutine.
@end table

@code{runtest} may also display the following messages:

@table @asis

@item ERROR
Indicates a major problem (detected by the test case itself) in running
the test. This is usually an unrecoverable error, such as a missing file
or loss of communication to the target. (POSIX testsuites should not
emit this message; use @emph{UNSUPPORTED}, @emph{UNTESTED}, or
@emph{UNRESOLVED} instead, as appropriate.)

@item WARNING
Indicates a possible problem in running the test. Usually warnings
correspond to recoverable errors, or display an important message about
the following tests.

@item NOTE
An informational message about the test case.
@end table

@node Invoking runtest, Common Operations, Output States, Runtest
@subsection Invoking runtest

This is the full set of command line options that @code{runtest}
recognizes. Option names may be abbreviated to the shortest unique
string.

@table @asis

@item @code{-a}, @code{--all}
Display all test output. By default, @emph{runtest} shows only the
output of tests that produce unexpected results; that is, tests with
status @emph{FAIL} (unexpected failure), @emph{XPASS} (unexpected
success), or @emph{ERROR} (a severe error in the test case
itself). Specify @code{--all} to see output for tests with status
@emph{PASS} (success, as expected) @emph{XFAIL} (failure, as expected),
or @emph{WARNING} (minor error in the test case itself).

@item @code{--build [triplet]}
@emph{triplet} is a system triplet of the form
@emph{cpu-vendor-os}. This is the type of machine DejaGnu and the tools
to be tested are built on. For a normal cross environment this is the
same as the host, but for a Canadian cross, they are different.

@item @code{-D0}, @code{-D1}
Start the internal Tcl debugger. The Tcl debugger supports breakpoints,
single stepping, and other common debugging activities. See the document
@uref{http://expect.sourceforge.net/doc/tcl-debug.ps, Debugger for Tcl
Applications} by Don Libes. If you specify @emph{-D1}, the @emph{expect}
shell stops at a breakpoint as soon as DejaGnu invokes it. If you
specify @emph{-D0}, DejaGnu starts as usual, but you can enter the
debugger by sending an interrupt (e.g. by typing @key{Control}@key{c}).

@item @code{--debug}
Turns on the Expect internal debugging output. Debugging output is
displayed as part of the @emph{runtest} output, and logged to a file
called @file{dbg.log}. The extra debugging output does @emph{not} appear
on standard output, unless the verbose level is greater than 2 (for
instance, to see debug output immediately, specify @code{--debug -v
-v}). The debugging output shows all attempts at matching the test
output of the tool with the scripted patterns describing expected
output.  The output generated with @code{--strace} also goes into
@file{dbg.log}.

@item @code{--help}
Prints out a short summary of the @emph{runtest} options, then exits
(even if you specify other options).

@item @code{--host [triplet]}
@emph{triplet} is a system triplet of the form @emph{cpu-vendor-os}.
Use this option to override the default string recorded by your
configuration's choice of host.  This choice does not change how
anything is actually configured unless --build is also specified; it
affects @emph{only} DejaGnu procedures that compare the host string with
particular values.  The procedures @emph{ishost}, @emph{istarget},
@emph{isnative}, and @emph{setup_xfail} are affected by
@code{--host}. In this usage, @emph{host} refers to the machine that the
tests are to be run on, which may not be the same as the @emph{build}
machine. If @code{--build} is also specified, then @code{--host} refers
to the machine that the tests will be run on, not the machine DejaGnu is
run on.

@item @code{--host_board [name]}
The host board to use.

@item @code{--ignore [name(s)] }
The name(s) of specific tests to ignore.

@item @code{--log_dialog}
Emit Expect output to stdout.  The Expect output is usually only written
to the @file{.log} file. By enabling this option, they are also printed
to standard output.

@item @code{--mail [address(es)]}
Send test results to one or more email addresses.

@item @code{--objdir [path]}
Use @emph{path} as the top directory containing any auxiliary compiled
test code. The default is '.'.  Use this option to locate pre-compiled
test code.  You can normally prepare any auxiliary files needed with
@emph{make}.

@item @code{--outdir [path]}
Write log files in directory @file{path}.  The default is '.', the
directory where you start @emph{runtest}. This option affects only the
summary (@file{.sum}) and the detailed log files (@file{.log}).  The
DejaGnu debug log @file{dbg.log} always appears (when requested) in the
local directory.

@item @code{--reboot [name]}
Reboot the target board when @code{runtest} starts. When running tests
on a separate target board, it is safer to reboot the target to be
certain of its state.  However, when developing test scripts, rebooting
can take a lot of time.

@item @code{--srcdir [path]}
Use @file{path} as the top directory for test scripts to
run. @emph{runtest} looks in this directory for any subdirectory whose
name begins with the toolname (specified with @code{--tool}). For
instance, with @code{--tool gdb}, @emph{runtest} uses tests in
subdirectories @file{gdb.*} (with the usual shell-like filename
expansion).  If you do not use @code{--srcdir}, @emph{runtest} looks for
test directories under the current working directory.

@item @code{--strace [n]}
Turn on internal tracing for @emph{expect}, to n levels deep. By
adjusting the level, you can control the extent to which your output
expands multi-level Tcl statements.  This allows you to ignore some
levels of @emph{case} or @emph{if} statements.  Each procedure call or
control structure counts as one ``level''. The output is recorded in the
same file, @file{dbg.log}, used for output from @code{--debug}.

@item @code{--target [triplet]}
Use this option to override the default setting (native
testing). @emph{triplet} is a system triplet of the form
@emph{cpu-vendor-os}. This option changes the configuration
@code{runtest} uses for the default tool names, and other setup
information.

@item @code{--target_board [name(s)]}
The list of target boards to run tests on.

@item @code{--tool [name(s)]}
Specifies which testsuite to run, and what initialization module to
use. @code{--tool} is used @emph{only} for these two purposes. It is
@emph{not} used to name the executable program to test. Executable tool
names (and paths) are recorded in @file{site.exp} and you can override
them by specifying Tcl variables on the command line.

For example, including @code{--tool} gcc on the command line runs tests
from all test subdirectories whose names match @file{gcc.*}, and uses
one of the initialization modules named @file{config/*-gcc.exp}. To
specify the name of the compiler (perhaps as an alternative path to what
@emph{runtest} would use by default), use @emph{GCC=path-to-gcc} on the
@emph{runtest} command line.

@item @code{--tool_exec [name]}
The path to the tool executable to test.

@item @code{--tool_opts [options]}
A list of additional options to pass to the tool.

@item @code{-v}, @code{--verbose}
Turns on more output. Repeating this option increases the amount of
output displayed. Level one (@emph{-v}) is simply test output. Level two
(@emph{-v -v}) shows messages on options, configuration, and process
control.  Verbose messages appear in the detailed (@file{*.log}) log
file, but not in the summary (@file{*.sum}) log file.

@item @code{-V}, @code{--version}
Prints out the version numbers of DejaGnu, Expect, and Tcl.

@item @code{-x}, @code{--xml=FILE}
Generate XML output. FILE is optional; if given it is the name of the
output file.  If not given, the output file is named after the tool.

@item @file{testfile}.exp[=arg(s)]
Specify the names of testsuites to run. By default, @emph{runtest} runs
all tests for the tool, but you can restrict it to particular testsuites
by giving the names of the @emph{.exp expect} scripts that control
them. @emph{testsuite}.exp cannot include directory names, only plain
filenames.

@code{arg(s)} specifies a subset of tests in a suite to run. For
compiler or assembler tests, which often use a single @emph{.exp} script
covering many different source files, this option allows you to further
restrict the tests by listing particular source files to compile. Some
tools even support wildcards here.  The wildcards supported depend upon
the tool, but typically @emph{?}, @emph{*}, and @emph{[chars]} are
recognized.

@item @code{tclvar}=value
You can define Tcl variables for use by your test scripts in the same
style used with @emph{make} for environment variables.  For example,
@emph{runtest GDB=gdb.old} defines a variable called @code{GDB}; when
your scripts refer to @code{$GDB} in this run, they use the value
@emph{gdb.old}.

The default Tcl variables used for most tools are defined in the main
DejaGnu @emph{Makefile}; their values are captured in the
@file{site.exp} file.
@end table

@node Common Operations, , Invoking runtest, Runtest
@subsection Common Options

Typically, you don't need to use any command line options.  The
@code{--tool} option is only required when there is more than one
testsuite in the same directory. The default options are in the local
@file{site.exp} file, created by @code{make site.exp}.

For example, if the directory @file{gdb/testsuite} contains a collection
of DejaGnu tests for GDB, you can run them like this:

@example
$ cd gdb/testsuite
$ runtest --tool gdb
@end example

The test output follows, then ends with:

@example
=== gdb Summary ===

# of expected passes 508
# of expected failures 103
/usr/latest/bin/gdb version 4.14.4 -nx
@end example

You can use the option @code{--srcdir} to point to some other directory
containing a collection of tests:

@example
$ runtest --srcdir /devo/gdb/testsuite
@end example

By default, @code{runtest} prints only the names of the tests it runs,
output from any tests that have unexpected results, and a summary
showing how many tests passed and how many failed.  To display output
from all tests (whether or not they behave as expected), use the
@code{-a} (all) option.  For more verbose output about processes being
run, communication, and so on, use @code{-v} (verbose). To see even more
output, use multiple @code{-v} options.  See @ref{Invoking runtest} for
a more detailed explanation of each @code{runtest} option.

@node Output Files, , Runtest, Running tests
@section Output files

DejaGnu always writes two kinds of output files.  Summary output is
written to the @file{.sum} file, and detailed output is written to the
@file{.log} file.  The tool name determines the prefix for these
files. For example, after running with @code{--tool gdb}, the output
files will be called @file{gdb.sum} and @file{gdb.log}. For
troubleshooting, a debug log file that logs the operation of Expect is
available.  Each of these will be described in turn.

@menu
* Summary log file::
* Detailed log file::
* Debug log file::
@end menu

@node Summary log file, Detailed log file, , Output Files
@subsection Summary log file

DejaGnu always produces a summary (@file{.sum}) output file. This
summary lists the names of all test files run.  For each test file, one
line of output from each @code{pass} command (showing status @emph{PASS}
or @emph{XPASS}) or @code{fail} command (status @emph{FAIL} or
@emph{XFAIL}), trailing summary statistics that count passing and
failing tests (expected and unexpected), the full pathname of the tool
tested, and the version number of the tool.  All possible outcomes, and
all errors, are always reflected in the summary output file, regardless
of whether or not you specify @code{--all}.

If any of your tests use the procedures @code{unresolved},
@code{unsupported}, or @code{untested}, the summary output also
tabulates the corresponding outcomes.

For example, after running @code{runtest --tool binutils} a summary log
file will be written to @file{binutils.sum}. Normally, DejaGnu writes
this file in your current working directory. Use the @code{--outdir}
option to select a different output directory.

@strong{Sample summary log}

@example
	Test Run By bje on Sat Nov 14 21:04:30 AEDT 2015

		 === gdb tests ===

	Running ./gdb.t00/echo.exp ...
	PASS:   Echo test
	Running ./gdb.all/help.exp ...
	PASS:   help add-symbol-file
	PASS:   help aliases
	PASS:   help breakpoint "bre" abbreviation
	FAIL:   help run "r" abbreviation
	Running ./gdb.t10/crossload.exp ...
	PASS:   m68k-elf (elf-big) explicit format; loaded
	XFAIL:  mips-ecoff (ecoff-bigmips) "ptype v_signed_char" signed C types

                === gdb Summary ===

	# of expected passes 5
	# of expected failures 1
	# of unexpected failures 1
	/usr/latest/bin/gdb version 4.6.5 -q
      
@end example

@node Detailed log file, Debug log file, Summary log file, Output Files
@subsection Detailed log file

DejaGnu also saves a detailed log file (@file{.log}), showing any output
generated by test cases as well as the summary output. For example,
after running @code{runtest --tool binutils}, a detailed log file will
be written to @file{binutils.log}. Normally, DejaGnu writes this file in
your current working directory. Use the @code{--outdir} option to select
a different output directory.

@strong{Sample detailed log for g++ tests}

@example
	Test Run By bje on Sat Nov 14 21:07:23 AEDT 2015

                === g++ tests ===

	Running ./g++.other/t01-1.exp ...
        PASS:   operate delete

	Running ./g++.other/t01-2.exp ...
        FAIL:   i960 bug EOF
	p0000646.C: In function `int  warn_return_1 ()':
	p0000646.C:109: warning: control reaches end of non-void function
	p0000646.C: In function `int  warn_return_arg (int)':
	p0000646.C:117: warning: control reaches end of non-void function
	p0000646.C: In function `int  warn_return_sum (int, int)':
	p0000646.C:125: warning: control reaches end of non-void function
	p0000646.C: In function `struct foo warn_return_foo ()':
	p0000646.C:132: warning: control reaches end of non-void function
	Running ./g++.other/t01-4.exp ...
        FAIL:   abort
	900403_04.C:8: zero width for bit-field `foo'
	Running ./g++.other/t01-3.exp ...
        FAIL:   segment violation
	900519_12.C:9: parse error before `;'
	900519_12.C:12: Segmentation violation
	/usr/latest/bin/gcc: Internal compiler error: program cc1plus got fatal signal

                === g++ Summary ===

	# of expected passes 1
	# of expected failures 3
	/usr/latest/bin/g++ version cygnus-2.0.1
	
@end example

@node Debug log file, , Detailed log file, Output Files
@subsection Debug log file

The @code{runtest} option @code{--debug} creates a file showing the
output from Expect in debugging mode. The @file{dbg.log} file is created
in the current directory.  The log file shows the string sent to the
tool being tested by each @code{send} command and the pattern it
compares with the tool output by each @code{expect} command.

The log messages begin with a message of the form:

@example
	expect: does @{tool output@} (spawn_id n)
 	   match pattern @{expected pattern@}?
@end example

For every unsuccessful match, Expect issues a @emph{no} after this
message. If other patterns are specified for the same Expect command,
they are reflected also, but without the first part of the message
(@emph{expect... match pattern}).

When Expect finds a match, the log for the successful match ends with
@emph{yes}, followed by a record of the Expect variables set to describe
a successful match.

@strong{Example debug log file for a GDB test}

@example
	send: sent @{break gdbme.c:34\n@} to spawn id 6
	expect: does @{@} (spawn_id 6) match pattern @{Breakpoint.*at.* file
	gdbme.c, line 34.*\(gdb\) $@}? no
	@{.*\(gdb\) $@}? no
	expect: does @{@} (spawn_id 0) match pattern @{return@} ? no
	@{\(y or n\) @}? no
	@{buffer_full@}? no
	@{virtual@}? no
	@{memory@}? no
	@{exhausted@}? no
	@{Undefined@}? no
	@{command@}? no
	break gdbme.c:34
	Breakpoint 8 at 0x23d8: file gdbme.c, line 34.
	(gdb) expect: does @{break gdbme.c:34\r\nBreakpoint 8 at 0x23d8:
	file gdbme.c, line 34.\r\n(gdb) @} (spawn_id 6) match pattern
	@{Breakpoint.*at.* file gdbme.c, line 34.*\(gdb\) $@}? yes
	expect: set expect_out(0,start) @{18@}
	expect: set expect_out(0,end) @{71@}
	expect: set expect_out(0,string) @{Breakpoint 8 at 0x23d8: file
	gdbme.c, line 34.\r\n(gdb) @}
	epect: set expect_out(spawn_id) @{6@}
	expect: set expect_out(buffer) @{break gdbme.c:34\r\nBreakpoint 8
	at 0x23d8: file gdbme.c, line 34.\r\n(gdb) @}
        PASS:   70      0       breakpoint line number in file
	
@end example

This example exhibits three properties of Expect and DejaGnu that might
be surprising at first glance:

@itemize 

@item
Empty output for the first attempted match.  The first set of attempted
matches shown ran against the output @emph{@{@}} --- that is, no
output. Expect begins attempting to match the patterns supplied
immediately; often, the first pass is against incomplete output (or
completely before all output, as in this case).

@item
Interspersed tool output.  The beginning of the log entry for the second
attempted match may be hard to spot: this is because the prompt
@emph{@{(gdb) @}} appears on the same line, just before the
@emph{expect:} that marks the beginning of the log entry.

@item
Fail-safe patterns.  Many of the patterns tested are fail-safe patterns
provided by GDB testing utilities, to reduce possible indeterminacy.  It
is useful to anticipate potential variations caused by extreme system
conditions (GDB might issue the message @emph{virtual memory exhausted}
in rare circumstances), or by changes in the tested program
(@emph{Undefined command} is the likeliest outcome if the name of a
tested command changes).

The pattern @emph{@{return@}} is a particularly interesting fail-safe to
notice; it checks for an unexpected @key{RET} prompt.  This may happen,
for example, if the tested tool can filter output through a pager.

These fail-safe patterns (like the debugging log itself) are primarily
useful while developing test scripts.  Use the @code{error} procedure to
make the actions for fail-safe patterns produce messages starting with
@emph{ERROR} on standard output, and in the detailed log file.

@end itemize

@node Customizing DejaGnu, Extending DejaGnu, Running tests, Top
@chapter Customizing DejaGnu

The site configuration file, @file{site.exp}, captures
configuration-dependent values and propagates them to the DejaGnu test
environment using Tcl variables.  This ties the DejaGnu test scripts
into the @code{configure} and @code{make} programs. If this file is
setup correctly, it is possible to execute a testsuite merely by typing
@code{runtest}.

DejaGnu supports two @file{site.exp} files. The multiple instances of
@file{site.exp} are loaded in a fixed order. The first file loaded is
the local file @file{site.exp}, and then the optional global
@file{site.exp} file as pointed to by the @code{DEJAGNU} environment
variable.

There is an optional global @file{site.exp}, containing configuration
values that apply to DejaGnu site-wide.  @code{runtest} loads these
values first. The global @file{site.exp} contains the default values for
all targets and hosts supported by DejaGnu. This global file is
identified by setting the environment variable @code{DEJAGNU} to the
name of the file.

Any directory containing a configured testsuite also has a local
@file{site.exp}, capturing configuration values specific to the tool
being tested.  Since @code{runtest} loads these values last, the
individual test configuration can either rely on and use, or override,
any of the global values from the global @file{site.exp} file.

You can usually generate or update the testsuite's local @file{site.exp}
by typing @code{make site.exp} in the testsuite directory, after the
test suite is configured.

You can also have a file in your home directory called
@file{.dejagnurc}. This gets loaded after the other config
files. Usually this is used for personal stuff, like setting the
@code{all_flag} so all the output gets printed, or your own verbosity
levels. This file is usually restricted to setting command line options.

You can further override the default values in a user-editable section
of any @file{site.exp}, or by setting variables on the @code{runtest}
command line.

@menu
* Local config file::
* Global config file::
* Board config file::
* Remote host testing::
* Config file values::
@end menu

@node Global config file, Local config file, , Customizing DejaGnu
@section Global config file

The global configuration file is where all the target specific
configuration variables for a site are set. For example, a centralized
testing lab where multiple developers have to share an embedded
development board. There are settings for both remote hosts and remote
targets.  Below is an example of a global configuration file for a
Canadian cross environment. A Canadian cross is a toolchain that is
built on, runs on, and targets three different system triplets (for
example, building a Solaris-hosted MIPS R4000 toolchain on a GNU/Linux
system).  All configuration values in the example below are
site-specific.

@strong{Example global configuration file}

@example
# Make sure we look in the right place for the board description files.
lappend boards_dir "/nfs/cygint/s1/cygnus/dejagnu/boards"

verbose "Global config file: target_triplet is $target_triplet" 2
global target_list

case "$target_triplet" in @{
    @{ "native" @} @{
        set target_list "unix"
    @}
    @{ "sparc64-*elf" @} @{
        set target_list "sparc64-sim"
    @}
    @{ "mips-*elf" @} @{
        set target_list "mips-sim wilma barney"
    @}
    @{ "mips-lsi-elf" @} @{
        set target_list "mips-lsi-sim@{,soft-float,el@}"
    @}
@}
@end example

In this case, we have support for several cross compilers, that all run
on this host. To run DejaGnu tests on tools hosted on operating systems
that do not run Expect, DejaGnu can be run on the build machine and
connect to the remote host to run all the tests.  As you can see, all
one does is set the variable @code{target_list} to the list of targets
and options to test.

In this example, simple cases like @emph{sparc64-elf} only require
setting the name of the single board configuration file. The
@emph{mips-elf} target is more complicated and sets the list to three
target boards. @emph{mips-sim} is a symbolic name for a simulator
``board'' and @emph{wilma} and @emph{barney} are symbolic names for
physical boards. Symbolic names are covered in the @ref{Adding a new
board} section. The more complicated example is the entry for
@emph{mips-lsi-elf}. This one runs the tests with multiple iterations
using all possible combinations of the @code{--soft-float} and the
@code{--el} (little endian) options.  The braced string includes an
initial comma so that the set of combinations includes no options at
all. Needless to say, this last target example is mostly specific to
compiler testing.

@node Local config file, Board config file, Global config file, Customizing DejaGnu
@section Local config file

It is usually more convenient to keep these @emph{manual overrides} in
the @file{site.exp} local to each test directory, rather than in the
global @file{site.exp} in the installed DejaGnu library. This file is
mostly for supplying tool specific info that is required by the
testsuite.

All local @file{site.exp} files have two sections, separated by
comments. The first section is generated by @code{make}. It is
essentially a collection of Tcl variable definitions based on
@file{Makefile} environment variables. Since they are generated by
@code{make}, they contain the values as specified by @code{configure}.
In particular, this section contains the @file{Makefile} variables for
host and target configuration data. Do not edit this first section; if
you do, your changes will be overwritten the next time you run
@code{make}.  The first section starts with:

@example
## these variables are automatically generated by make ##
# Do not edit here. If you wish to override these values
# add them to the last section
@end example

In the second section, you can override any default values for all the
variables.  The second section can also contain your preferred defaults
for all the command line options to @code{runtest}. This allows you to
easily customize @code{runtest} for your preferences in each configured
testsuite tree, so that you need not type options repeatedly on the
command line.  The second section may also be empty if you do not wish
to override any defaults.

@strong{The first section ends with this line}

@example
## All variables above are generated by configure. Do Not Edit ##
@end example

You can make any changes under this line. If you wish to redefine a
variable in the top section, then just put a duplicate value in this
second section. Usually the values defined in this config file are
related to the configuration of the test run. This is the ideal place to
set the variables @code{host_triplet}, @code{build_triplet},
@code{target_triplet}. All other variables are tool dependent, i.e., for
testing a compiler, the value for @code{CC} might be set to a freshly
built binary, as opposed to one in the user's path.

Here's an example local site.exp file, as used for GCC/G++ testing.

@strong{Local Config File}

@example
## these variables are automatically generated by make ##
# Do not edit here. If you wish to override these values
# add them to the last section
set rootme "/build/devo-builds/i686-pc-linux-gnu/gcc"
set host_triplet i686-pc-linux-gnu
set build_triplet i686-pc-linux-gnu
set target_triplet i686-pc-linux-gnu
set target_alias i686-pc-linux-gnu
set CFLAGS ""
set CXXFLAGS "-isystem /build/devo-builds/i686-pc-linux-gnu/gcc/../libio -isystem $srcdir/../libg++/src -isystem $srcdir/../libio -isystem $srcdir/../libstdc++ -isystem $srcdir/../libstdc++/stl -L/build/devo-builds/i686-pc-linux-gnu/gcc/../libg++ -L/build/devo-builds/i686-pc-linux-gnu/gcc/../libstdc++"
append LDFLAGS " -L/build/devo-builds/i686-pc-linux-gnu/gcc/../ld"
set tmpdir /build/devo-builds/i686-pc-linux-gnu/gcc/testsuite
set srcdir "$@{srcdir@}/testsuite"
## All variables above are generated by configure. Do Not Edit ##
@end example

This file defines the required fields for a local config file, namely
the three system triplets, and the srcdir. It also defines several other
Tcl variables that are used exclusively by the GCC testsuite. For most
test cases, the CXXFLAGS and LDFLAGS are supplied by DejaGnu itself for
cross testing, but to test a compiler, GCC needs to manipulate these
itself.

The local @file{site.exp} may also set Tcl variables such as
@code{test_timeout} which can control the amount of time (in seconds) to
wait for a remote test to complete. If not specified,
@code{test_timeout} defaults to 300 seconds.

@node Board config file, Remote host testing, Local config file, Customizing DejaGnu
@section Board configuration file

The board configuration file is where board-specific configuration
details are stored. A board configuration file contains all the
higher-level configuration settings. There is a rough inheritance
scheme, where it is possible to derive a new board description file from
an existing one. There are also collections of custom procedures for
common environments. For more information on adding a new board config
file, go to the @ref{Adding a new board} section.

An example board configuration file for a GNU simulator is as
follows. @code{set_board_info} is a procedure that sets the field name
to the specified value. The procedures mentioned in brackets are
@emph{helper procedures}. These are used to find parts of a toolchain
required to build an executable image that may reside in various
locations. This is mostly of use when the startup code, the standard C
libraries, or the toolchain itself is part of your build tree.

@strong{Example file}
@example
# This is a list of toolchains that are supported on this board.
set_board_info target_install @{sparc64-elf@}

# Load the generic configuration for this board. This will define any
# routines needed by the tool to communicate with the board.
load_generic_config "sim"

# We need this for find_gcc and *_include_flags/*_link_flags.
load_base_board_description "basic-sim"

# Use long64 by default.
process_multilib_options "long64"

setup_sim sparc64

# We only support newlib on this target. We assume that all multilib
# options have been specified before we get here.

set_board_info compiler "[find_gcc]"
set_board_info cflags "[libgloss_include_flags] [newlib_include_flags]"
set_board_info ldflags "[libgloss_link_flags] [newlib_link_flags]"
# No linker script.
set_board_info ldscript ""

# Used by a few gcc.c-torture testcases to delimit how large the
# stack can be.
set_board_info gcc,stack_size 16384
# The simulator doesn't return exit status and we need to indicate this
# the standard GCC wrapper will work with this target.
set_board_info needs_status_wrapper 1
# We can't pass arguments to programs.
set_board_info noargs 1
@end example

There are five helper procedures used in this example:

@itemize
@item
@code{find_gcc} looks for a copy of the GNU compiler in your build tree,
or it uses the one in your path. This will also return the proper
transformed name for a cross compiler if you whole build tree is
configured for one.

@item
@code{libgloss_include_flags} returns the flags to compile using
@ref{Libgloss, libgloss}, the GNU board support package (BSP).

@item
@code{libgloss_link_flags} returns the flags to link an executable using
@ref{Libgloss, libgloss}.

@item
@code{newlib_include_flags} returns the flags to compile using
@uref{https://sourceware.org/newlib, newlib}, a re-entrant standard C
library for embedded systems comprising of non-GPL'd code

@item
@code{newlib_link_flags} returns the flags to link an executable with
@uref{https://sourceware.org/newlib, newlib}.

@end itemize

@node Remote host testing, Config file values, Board config file, Customizing DejaGnu
@section Remote host testing

DejaGnu also supports running the tests on a remote host. To set this
up, the remote host needs an FTP server, and a telnet server. Currently
foreign operating systems used as remote hosts are VxWorks, VRTX,
DOS/Windows 3.1, MacOS and Windows.

The recommended source for a Windows-based FTP server is to get IIS
(either IIS 1 or Personal Web Server) from
@uref{http://www.microsoft.com,http://www.microsoft.com}.  When you
install it, make sure you install the FTP server - it's not selected by
default. Go into the IIS manager and change the FTP server so that it
does not allow anonymous FTP. Set the home directory to the root
directory (i.e. c:\) of a suitable drive. Allow writing via FTP.

It will create an account like IUSR_FOOBAR where foobar is
the name of your machine. Go into the user editor and give that
account a password that you don't mind hanging around in the
clear (i.e. not the same as your admin or personal
passwords). Also, add it to all the various permission groups.

You'll also need a telnet server. For Windows, go to the
@uref{http://ataman.com,Ataman} web site, pick up the Ataman Remote
Logon Services for Windows, and install it. You can get started on the
eval period anyway. Add IUSR_FOOBAR to the list of allowed users, set
the HOME directory to be the same as the FTP default directory. Change
the Mode prompt to simple.

Ok, now you need to pick a directory name to do all the testing in. For
the sake of this example, we'll call it piggy (i.e. c:\piggy). Create
this directory.

You'll need a unix machine. Create a directory for the scripts you'll
need. For this example, we'll use /usr/local/swamp/testing. You'll need
to have a source tree somewhere, say /usr/src/devo. Now, copy some files
from releng's area in SV to your machine:

@strong{Remote host setup}

@example
cd /usr/local/swamp/testing
mkdir boards
scp darkstar.welcomehome.org:/dejagnu/cst/bin/MkTestDir .
scp darkstar.welcomehome.org:/dejagnu/site.exp .
scp darkstar.welcomehome.org:/dejagnu/boards/useless98r2.exp boards/foobar.exp
export DEJAGNU=/usr/local/swamp/testing/site.exp
@end example

You must edit the boards/foobar.exp file to reflect your machine; change
the hostname (foobar.com), username (iusr_foobar), password, and
ftp_directory (c:/piggy) to match what you selected.

Edit the global @file{ site.exp} to reflect your boards directory:

@strong{Add The Board Directory}

@example
lappend boards_dir "/usr/local/swamp/testing/boards"
@end example

Now run MkTestDir, which is in the contrib directory. The first
parameter is the toolchain prefix, the second is the location of your
devo tree. If you are testing a cross compiler (ex: you have
sh-hms-gcc.exe in your PATH on the PC), do something like this:

@strong{Setup Cross Remote Testing}

@example
./MkTestDir sh-hms /usr/dejagnu/src/devo
@end example

If you are testing a native PC compiler (ex: you have
gcc.exe in your PATH on the PC), do this:

@strong{Setup Native Remote Testing}

@example
./MkTestDir '' /usr/dejagnu/src/devo
@end example

To test the setup, @code{ftp} to your PC using the username
(iusr_foobar) and password you selected. CD to the test
directory. Upload a file to the PC. Now telnet to your PC using the same
username and password. CD to the test directory. Make sure the file is
there. Type "set" and/or "gcc -v" (or sh-hms-gcc -v) and make sure the
default PATH contains the installation you want to test.

@strong{Run Test Remotely}

@example
cd /usr/local/swamp/testing
make  -k -w check RUNTESTFLAGS="--host_board foobar --target_board foobar -v -v" > check.out 2>&1
@end example

To run a specific test, use a command like this (for
this example, you'd run this from the gcc directory that
MkTestDir created):

@strong{Run a Test Remotely}

@example
make check RUNTESTFLAGS="--host_board sloth --target_board sloth -v compile.exp=921202-1.c"
@end example

Note: if you are testing a cross-compiler, put in the correct target
board. You'll also have to download more .exp files and modify them for
your local configuration. The -v's are optional.

@node Config file values, , Remote host testing, Customizing DejaGnu
@section Config file values

DejaGnu uses a Tcl associative array to hold all the info for each
machine. In the case of a Canadian cross, this means host information as
well as target information. The named array is called
@code{target_info}, and it has two indices. The following fields are
part of the array.

@menu
* Command line option variables::
* User configuration file::
@end menu

@node Command line option variables, User configuration file, , Config file values
@subsection Command line option variables

In the user editable second section of the @ref{User configuration file}
you can not only override the configuration variables captured in the
first section, but also specify default values for all on the
@code{runtest} command line options.  Save for @code{--debug},
@code{--help}, and @code{--version}, each command line option has an
associated Tcl variable.  Use the Tcl @code{set} command to specify a
new default value (as for the configuration variables).  The following
table describes the correspondence between command line options and
variables you can set in @file{site.exp}.  @ref{Invoking runtest}, for
explanations of the command-line options.

@multitable @columnfractions 0.2 0.2 0.6
@item
@strong{Option}@tab @strong{Tcl variable}@tab @strong{Description}

@item
-a, --all@tab all_flag@tab display all test results if set

@item
--build@tab build_triplet@tab system triplet for the build host

@item
--dir@tab cmdline_dir_to_run@tab run only tests in the specified directory

@item
--host@tab host_triplet@tab system triplet for the host

@item
--host_board@tab host_board@tab host board definition to use

@item
--ignore@tab ignoretests @tab do not run the specified tests

@item
--log_dialog@tab log_dialog@tab emit Expect output to standard output

@item
--outdir@tab outdir@tab directory for @file{.sum} and @file{.log} files

@item
--objdir@tab objdir@tab directory for pre-compiled binaries

@item
--reboot@tab reboot@tab reboot the target if set to 1

@item
--srcdir@tab srcdir@tab directory of test subdirectories

@item
--target@tab target_triplet@tab system triplet for the target

@item
--target_board@tab target_list@tab list of target boards to run tests on

@item
--tool@tab tool@tab name of tool to test (identifies init, test subdirectory)

@item
--tool_exec@tab TOOL_EXECUTABLE@tab path to the executable to test

@item
--tool_opts@tab TOOL_OPTIONS@tab additional options to pass to the tool

@item
--tool_root_dir@tab tool_root_dir@tab tool root directory

@item
-v, --verbose@tab verbose@tab verbosity level greater than or equal to 0

@end multitable

@node User configuration file, , Command line option variables, Config file values
@subsection Per-user configuration file (.dejagnurc)

The per-user configuration file is named @file{.dejagnurc} in the user's
home directory.  It is used to customize the behaviour of @code{runtest}
for each user -- typically the user's preference for log verbosity, and
for storing any experimental Tcl procedures. An example
@file{~/.dejagnurc} file looks like:

@strong{Example .dejagnurc}

@example
set all_flag 1
set RLOGIN /usr/ucb/rlogin
set RSH /usr/local/sbin/ssh
@end example

Here @code{all_flag} is set so that I see all the test cases that PASS
along with the ones that FAIL. I also set @code{RLOGIN} to the BSD
(non-Kerberos) version.  I also set @code{RSH} to the SSH secure shell,
as rsh is mostly used to test Unix machines within a local network.

@node Extending DejaGnu, Unit testing, Customizing DejaGnu, Top
@chapter Extending DejaGnu

@menu
* Adding a new testsuite::
* Adding a new tool::
* Adding a new target::
* Adding a new board::
* Board file values::
* Writing a test case::
* Debugging a test case::
* Adding a test case to a testsuite::
* Test case special variables: Test case variables.
@end menu

@node Adding a new testsuite, Adding a new tool, , Extending DejaGnu
@section Adding a new testsuite

The testsuite for a new tool should always be located in that tools
source directory. DejaGnu require the directory be named
@file{testsuite}. Under this directory, the test cases go in a
subdirectory whose name begins with the tool name. For example, for a
tool named @emph{gdb}, each subdirectory containing testsuites must
start with @samp{gdb.}.

@node Adding a new tool, Adding a new target, Adding a new testsuite, Extending DejaGnu
@section Adding a new tool

In general, the best way to learn how to write code, or even prose, is
to read something similar.  This principle applies to test cases and to
testsuites.  Unfortunately, well-established testsuites have a way of
developing their own conventions: as test writers become more
experienced with DejaGnu and with Tcl, they accumulate more utilities,
and take advantage of more and more features of Expect and Tcl in
general.  Inspecting such established testsuites may make the prospect
of creating an entirely new testsuite appear overwhelming.
Nevertheless, it is straightforward to start a new testsuite.

To help orient you further in this task, here is an outline of the steps
to begin building a testsuite for a program example.


Create or select a directory to contain your new
collection of tests. Change into that directory (shown here as
@file{testsuite}):

Create a @file{configure.in} file in this directory, to control
configuration-dependent choices for your tests.  So far as DejaGnu is
concerned, the important thing is to set a value for the variable
@code{target_abbrev}; this value is the link to the init file you will
write soon.  (For simplicity, we assume the environment is Unix, and use
@emph{unix} as the value.)

What else is needed in @file{configure.in} depends on the requirements
of your tool, your intended test environments, and which configure
system you use.  This example is a minimal @file{configure.ac} for use
with GNU Autoconf.

@subsection Sample Makefile.in Fragment

Create @file{Makefile.in} (if using Autoconf), or @file{Makefile.am} (if
using Automake), the source file used by configure to build your
@file{Makefile}. If you are using GNU Automake.just add the keyword
@emph{dejagnu} to the @emph{AUTOMAKE_OPTIONS} variable in your
@file{Makefile.am} file. This will add all the @file{Makefile} support
needed to run DejaGnu, and support the @ref{Make Check, make check}
target.

You also need to include two targets important to DejaGnu: @emph{check},
to run the tests, and @emph{site.exp}, to set up the Tcl copies of
configuration-dependent values. This is called the @ref{Local config
file} The @emph{check} target must invoke the @code{runtest} program to
run the tests.

The @emph{site.exp} target should usually set up (among other things)
the @emph{$tool} variable for the name of your program. If the local
@file{site.exp} file is setup correctly, it is possible to execute the
tests by merely typing @code{runtest} on the command line.

@example
# Look for a local version of DejaGnu, otherwise use one in the path
RUNTEST = `if test -f $(top_srcdir)/../dejagnu/runtest; then \
      echo $(top_srcdir) ../dejagnu/runtest; \
    else \
      echo runtest; \
    fi`

# Flags to pass to runtest
RUNTESTFLAGS =

# Execute the tests
check: site.exp all
        $(RUNTEST) $(RUNTESTFLAGS) --tool $@{example@} --srcdir $(srcdir)

# Make the local config file
site.exp: ./config.status Makefile
	@@echo "Making a new config file..."
        -@@rm -f ./tmp?
        @@touch site.exp

        -@@mv site.exp site.bak
        @@echo "## these variables are automatically generated by make ##" > ./tmp0
	@@echo "# Do not edit here. If you wish to override these values" >> ./tmp0
        @@echo "# add them to the last section" >> ./tmp0
        @@echo "set host_os $@{host_os@}" >> ./tmp0
        @@echo "set host_alias $@{host_alias@}" >> ./tmp0
        @@echo "set host_cpu $@{host_cpu@}" >> ./tmp0
        @@echo "set host_vendor $@{host_vendor@}" >> ./tmp0
        @@echo "set target_os $@{target_os@}" >> ./tmp0
        @@echo "set target_alias $@{target_alias@}" >> ./tmp0
        @@echo "set target_cpu $@{target_cpu@}" >> ./tmp0
        @@echo "set target_vendor $@{target_vendor@}" >> ./tmp0
        @@echo "set host_triplet $@{host_canonical@}" >> ./tmp0
        @@echo "set target_triplet $@{target_canonical@}">>./tmp0
        @@echo "set tool binutils" >> ./tmp0
        @@echo "set srcdir $@{srcdir@}" >> ./tmp0
        @@echo "set objdir `pwd`" >> ./tmp0
        @@echo "set $@{examplename@} $@{example@}" >> ./tmp0
        @@echo "## All variables above are generated by configure. Do Not Edit ##" >> ./tmp0
        @@cat ./tmp0 > site.exp
        @@sed < site.bak \
            -e '1,/^## All variables above are.*##/ d' \
            >> site.exp
        -@@rm -f ./tmp?
@end example

@subsection Simple tool init file for batch programs

Create a directory (under @file{testsuite}) called @file{config}. Make a
tool init file in this directory. Its name must start with the
@code{target_abbrev} value, or be named @file{default.exp} so call it
@file{config/unix.exp} for our Unix based example. This is the file that
contains the target-dependent procedures.  Fortunately, on a native Unix
system, most of them do not have to do very much in order for
@code{runtest} to run.  If the program being tested is not interactive,
you can get away with this minimal @file{unix.exp} to begin with:

@example
proc myprog_exit @{@} @{@}
proc myprog_version @{@} @{@}
@end example

If the program being tested is interactive, however, you might as well
define a @emph{start} routine and invoke it by using a tool init file
like this:

@subsection Simple tool init file for interactive programs

@example
proc myprog_exit @{@} @{@}
proc myprog_version @{@} @{@}

proc myprog_start @{@} @{
     global $@{examplename@}
     spawn $@{examplename@}
     expect @{
	-re "" @{@}
     @}
@}

# Start the program running we want to test
myprog_start
@end example

Create a directory whose name begins with your tool's name, to contain
tests. For example, if your tool's name is @emph{example}, then the
directories all need to start with @samp{example.}.  Create a sample
test file ending in @file{.exp}. You can use @file{first-try.exp}. To
begin with, just write one line of Tcl code to issue a message:

@example
send_user "Testing: one, two...\n"
@end example

@subsection Testing A New Tool Config

Back in the @file{testsuite} (top level) directory, run
@code{configure}. Typically you do this while in the build directory.
You are now ready to type @code{make check} or @code{runtest}.  You
should see something like this:

@example
Test Run By bje on Sat Nov 14 15:08:54 AEDT 2015

          === example tests ===

Running ./example.0/first-try.exp ...
Testing: one, two...

          === example Summary ===
@end example

There is no output in the summary, because so far the example does not
call any of the procedures that report a test outcome.

Write some real tests. For an interactive tool, you should probably
write a real exit routine in fairly short order. In any case, you should
also write a real version routine soon.

@node Adding a new target, Adding a new board, Adding a new tool, Extending DejaGnu
@section Adding a new target

DejaGnu has some additional requirements for target support, beyond the
general-purpose provisions of a @code{configure} script. DejaGnu must
actively communicate with the target, rather than simply generating or
managing code for the target architecture.  Therefore, each tool
requires an initialization module for each target.  For new targets, you
must supply a few Tcl procedures to adapt DejaGnu to the target.

Usually the best way to write a new initialization module is to edit an
existing initialization module; some trial and error will be
required. If necessary, you can use the @code{--debug} option to see
what is really going on.

When you code an initialization module, be generous in printing
information using the @code{verbose} procedure.  In cross-development
environments, most of the work is in getting the communications
right. Code for communicating via TCP/IP networks or serial lines is
available in a DejaGnu library files such as @file{lib/telnet.exp}.

If you suspect a communication problem, try running the connection
interactively from Expect.  (There are three ways of running Expect as
an interactive interpreter.  You can run Expect with no arguments, and
control it completely interactively; or you can use @code{expect -i}
together with other command-line options and arguments; or you can run
the command @code{interpreter} from any Expect procedure.  Use
@code{return} to get back to the calling procedure (if any), or
@code{return -tcl} to make the calling procedure itself return to its
caller; use @code{exit} or end-of-file to leave Expect altogether.)  Run
the program whose name is recorded in @code{$connectmode}, with the
arguments in @code{$targetname}, to establish a connection.  You should
at least be able to get a prompt from any target that is physically
connected.

@node Adding a new board, Board file values, Adding a new target, Extending DejaGnu
@section Adding a new board

Adding a new board consists of creating a new board configuration
file. Examples are in @file{dejagnu/baseboards}. Usually to make a new
board file, it's easiest to copy an existing one. It is also possible to
have your file be based on a @emph{baseboard} file with only one or two
changes needed. Typically, this can be as simple as just changing the
linker script. Once the new baseboard file is done, add it to the
@code{boards_DATA} list in the @file{dejagnu/baseboards/Makefile.am},
and regenerate the Makefile.in using automake. Then just rebuild and
install DejaGnu. You can test it by:

There is a crude inheritance scheme going on with board files, so you
can include one board file into another, The two main procedures used to
do this are @code{load_generic_config} and
@code{load_base_board_description}. The generic config file contains
other procedures used for a certain class of target. The board
description file is where the board specific settings go. Commonly there
are similar target environments with just different processors.

@strong{Testing a New Board Configuration File}

@example
make check RUNTESTFLAGS="--target_board=newboardfile".
@end example

Here's an example of a board config file. There are several @emph{helper
procedures} used in this example. A helper procedure is one that look
for a tool of files in commonly installed locations. These are mostly
used when testing in the build tree, because the executables to be
tested are in the same tree as the new dejagnu files. The helper
procedures are the ones in square braces @emph{[]}, which is the Tcl
execution characters.

@strong{Example Board Configuration File}

@example
# Load the generic configuration for this board. This will define a basic
# set of routines needed by the tool to communicate with the board.
load_generic_config "sim"

# basic-sim.exp is a basic description for the standard Cygnus simulator.
load_base_board_description "basic-sim"

# The compiler used to build for this board. This has *nothing* to do
# with what compiler is tested if we're testing gcc.
set_board_info compiler "[find_gcc]"

# We only support newlib on this target.
# However, we include libgloss so we can find the linker scripts.
set_board_info cflags "[newlib_include_flags] [libgloss_include_flags]"
set_board_info ldflags "[newlib_link_flags]"

# No linker script for this board.
set_board_info ldscript "-Tsim.ld"

# The simulator doesn't return exit statuses and we need to indicate this.
set_board_info needs_status_wrapper 1

# Can't pass arguments to this target.
set_board_info noargs 1

# No signals.
set_board_info gdb,nosignals 1

# And it can't call functions.
set_board_info gdb,cannot_call_functions 1
@end example

@node Board file values, Writing a test case, Adding a new board, Extending DejaGnu
@section Board configuration file values

The following fields are in the @code{board_info} array.  These are set
by the @code{set_board_info} procedure (or @code{add_board_info}
procedure for appending to lists). Both procedures take a field name and
a value for the field (or is added to the field), respectively.  Some
common board info fields are shown below.

@multitable @columnfractions 0.2 0.2 0.6
@item
@strong{Field} @tab @strong{Example value} @tab @strong{Description}
@item
compiler@tab "[find_gcc]"@tab The path to the compiler to use.
@item
cflags@tab "-mca"@tab Compilation flags for the compiler.
@item
ldflags@tab "[libgloss_link_flags] [newlib_link_flags]"@tab Linking flags for the compiler.
@item
ldscript@tab "-Wl,-Tidt.ld"@tab The linker script to use when cross compiling.
@item
libs@tab "-lgcc"@tab Any additional libraries to link in.
@item
shell_prompt@tab "cygmon>"@tab The command prompt of the remote shell.
@item
hex_startaddr@tab "0xa0020000"@tab The Starting address as a string.
@item
start_addr@tab 0xa0008000@tab The starting address as a value.
@item
startaddr@tab "a0020000"@tab 
@item
exit_statuses_bad@tab 1@tab Whether there is an accurate exit status.
@item
reboot_delay@tab 10@tab The delay between power off and power on.
@item
unreliable@tab 1@tab Whether communication with the board is unreliable.
@item
sim@tab [find_sim]@tab The path to the simulator to use.
@item
objcopy@tab $tempfil@tab The path to the @code{objcopy} program.
@item
support_libs@tab "$@{prefix_dir@}/i386-coff/"@tab Support libraries needed for cross compiling.
@item
addl_link_flags@tab "-N"@tab Additional link flags, rarely used.
@item
remotedir@tab "/tmp/runtest.[pid]"@tab Directory on the remote target in which executables are downloaded and executed.
@end multitable

These fields are used by the GCC and GDB tests, and are mostly
only useful to somewhat trying to debug a new board file for one of
these tools. Many of these are used only by a few testcases, and their
purpose is esoteric. These are listed with sample values as a guide to
better guessing if you need to change any of these.

@strong{Board Info Fields For GCC & GDB}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Field@tab Sample Value@tab Description
@item
strip@tab $tempfile@tab Strip the executable of symbols.
@item
gdb_load_offset@tab "0x40050000"@tab 
@item
gdb_protocol@tab "remote"@tab The GDB debugging protocol to use.
@item
gdb_sect_offset@tab "0x41000000";@tab 
@item
gdb_stub_ldscript@tab "-Wl,-Teva-stub.ld"@tab The linker script to use with a GDB stub.
@item
gdb,noargs@tab 1@tab Whether the target can take command line arguments.
@item
gdb,nosignals@tab 1@tab Whether there are signals on the target.
@item
gdb,short_int@tab 1@tab 
@item
gdb,target_sim_options@tab "-sparclite"@tab Special options to pass to the simulator.
@item
gdb,timeout@tab 540@tab Timeout value to use for remote communication.
@item
gdb_init_command@tab "set mipsfpu none"@tab A single command to send to GDB before the program being
debugged is started.
@item
gdb_init_commands@tab "print/x \$fsr = 0x0"@tab Same as @emph{gdb_init_command}, except
that this is a list, more commands can be added.
@item
gdb_load_offset@tab "0x12020000"@tab 
@item
gdb_opts@tab "--command gdbinit"@tab 
@item
gdb_prompt@tab "\\(gdb960\\)"@tab The prompt GDB is using.
@item
gdb_run_command@tab "jump start"@tab 
@item
gdb_stub_offset@tab "0x12010000"@tab 
@item
use_gdb_stub@tab 1@tab Whether to use a GDB stub.
@item
wrap_m68k_aout@tab 1@tab 
@item
gcc,no_label_values@tab 1@tab 
@item
gcc,no_trampolines@tab 1@tab 
@item
gcc,no_varargs@tab 1@tab 
@item
gcc,stack_size@tab 16384@tab Stack size to use with some GCC testcases.
@item
ieee_multilib_flags@tab "-mieee"@tab 
@item
is_simulator@tab 1@tab 
@item
needs_status_wrapper@tab 1@tab 
@item
no_double@tab 1@tab 
@item
no_long_long@tab 1@tab 
@item
noargs@tab 1@tab 
@item
target_install@tab @{sh-hms@}@tab 
@end multitable

@node Writing a test case, Debugging a test case, Board file values, Extending DejaGnu
@section Writing a test case

The easiest way to prepare a new test case is to base it on an existing
one for a similar situation.  There are two major categories of tests:
batch-oriented and interactive.  Batch-oriented tests are usually easier
to write.

The GCC tests are a good example of batch-oriented tests.  All GCC tests
consist primarily of a call to a single common procedure, since all the
tests either have no output, or only have a few warning messages when
successfully compiled.  Any non-warning output constitutes a test
failure.  All the C code needed is kept in the test directory.  The test
driver, written in Tcl, need only get a listing of all the C files in
the directory, and compile them all using a generic procedure. This
procedure and a few others supporting for these tests are kept in the
library module @file{lib/c-torture.exp} of the GCC testsuite. Most tests
of this kind use very few Expect features, and are coded almost purely
in Tcl.

Writing the complete suite of C tests, then, consisted of these steps:

@itemize 
@item
Copying all the C code into the test directory.  These tests were based
on the C-torture test created by Torbjorn Granlund (on behalf of the
Free Software Foundation) for GCC development.

@item
Writing (and debugging) the generic Tcl procedures for compilation.

@item
Writing the simple test driver: its main task is to search the directory
(using the Tcl procedure @emph{glob} for filename expansion with
wildcards) and call a Tcl procedure with each filename.  It also checks
for a few errors from the testing procedure.
@end itemize

Testing interactive programs is intrinsically more complex.  Tests for
most interactive programs require some trial and error before they are
complete.

However, some interactive programs can be tested in a simple fashion
reminiscent of batch tests.  For example, prior to the creation of
DejaGnu, the GDB distribution already included a wide-ranging testing
procedure.  This procedure was very robust, and had already undergone
much more debugging and error checking than many recent DejaGnu test
cases.  Accordingly, the best approach was simply to encapsulate the
existing GDB tests, for reporting purposes. Thereafter, new GDB tests
built up a family of Tcl procedures specialized for GDB testing.

@subsection Hints on writing a test case

It is safest to write patterns that match all the output generated by
the tested program; this is called closure.  If a pattern does not match
the entire output, any output that remains will be examined by the next
@code{expect} command. In this situation, the precise boundary that
determines which @code{expect} command sees what is very sensitive to
timing between the Expect task and the task running the tested tool.  As
a result, the test may sometimes appear to work, but is likely to have
unpredictable results. (This problem is particularly likely for
interactive tools, but can also affect batch tools---especially for
tests that take a long time to finish.) The best way to ensure closure
is to use the @code{-re} option for the @code{expect} command to write
the pattern as a full regular expressions; then you can match the end of
output using a @emph{$}.  It is also a good idea to write patterns that
match all available output by using @emph{.*\} after the text of
interest; this will also match any intervening blank lines.  Sometimes
an alternative is to match end of line using @emph{\r} or @emph{\n}, but
this is usually too dependent on terminal settings.

Always escape punctuation, such as @emph{(} or @emph{"}, in your
patterns; for example, write @emph{\(}.  If you forget to escape
punctuation, you will usually see an error message like:

@example
extra characters after close-quote
@end example

If you have trouble understanding why a pattern does not match the
program output, try using the @code{--debug} option to @code{runtest},
and examine the debug log carefully.

Be careful not to neglect output generated by setup rather than by the
interesting parts of a test case.  For example, while testing GDB, I
issue a send @emph{set height 0\n} command.  The purpose is simply to
make sure GDB never calls a paging program.  The @emph{set height}
command in GDB does not generate any output; but running any command
makes GDB issue a new @emph{(gdb) } prompt.  If there were no
@code{expect} command to match this prompt, the output @emph{(gdb) }
begins the text seen by the next @code{expect} command---which might
make that pattern fail to match.

To preserve basic sanity, I also recommended that no test ever pass if
there was any kind of problem in the test case.  To take an extreme
case, tests that pass even when the tool will not spawn are
misleading. Ideally, a test in this sort of situation should not fail
either. Instead, print an error message by calling one of the DejaGnu
procedures @code{error} or @code{warning}.


@node Debugging a test case, Adding a test case to a testsuite, Writing a test case, Extending DejaGnu
@section Debugging a test case

These are the kinds of debugging information available from DejaGnu:

@itemize 

@item
Output controlled by test scripts themselves, explicitly allowed for by
the test author.  This kind of debugging output appears in the detailed
output recorded in the DejaGnu log file.  To do the same for new tests,
use the @code{verbose} procedure (which in turn uses the Tcl variable
@samp{verbose}) to control how much output to generate.  This will make
it easier for other people running the test to debug it if necessary.
If @samp{verbose} is zero, there should be no output other than the
output from the framework (eg. FAIL).  Then, to whatever extent is
appropriate for the particular test, allow successively higher values of
@samp{verbose} to generate more information.  Be kind to other
programmers who use your tests -- provide plenty of debugging
information.

@item
Output from the internal debugging functions of Tcl and Expect. There is
a command line options for each; both forms of debugging output are
recorded in the file @file{dbg.log} in the current directory.

Use @code{--debug} for information from Expect. It logs how Expect
attempts to match the tool output with the patterns specified. This can
be very helpful while developing test scripts, since it shows precisely
the characters received.  Iterating between the latest attempt at a new
test script and the corresponding @file{dbg.log} can allow you to create
the final patterns by ``cut and paste''.  This is sometimes the best way
to write a test case.

@item
Use @code{--strace} to see more detail from Tcl. This logs how Tcl
procedure definitions are expanded as they execute. The trace level
argument controls the depth of definitions expanded.

@item
If the value of @samp{verbose} is 3 or greater (@code{runtest -v -v
-v}), DejaGnu activates the Expect command @code{log_user}.  This
command prints all Expect actions to standard output, to the @file{.log}
file and, if @code{--debug} is given, to @file{dbg.log}.
@end itemize

@node Adding a test case to a testsuite, Test case variables, Debugging a test case, Extending DejaGnu
@section Adding a test case to a testsuite

There are two slightly different ways to add a test case. One is to add
the test case to an existing directory. The other is to create a new
directory to hold your test. The existing test directories represent
several styles of testing, all of which are slightly different. Examine
the testsuite subdirectories for the tool of interest to see which
approach is most suitable.

Adding a GCC test may be very simple: just add the source file to any
test directory beginning with @file{gcc.} and it will be tested on the
next test run.

Adding a test by creating a new directory involves:

@enumerate
@item
Create the new directory. All subdirectory names begin with the name of
the tool to test; e.g. G++ tests might be in a directory called
@file{g++.other}. There can be multiple testsuite subdirectories with
the same tool name prefix.

@item
Add the new test case to the directory, as above.
@end enumerate

@node Test case variables, , Adding a test case to a testsuite, Extending DejaGnu
@section Test case special variables

There are special variables that contain other information from
DejaGnu. Your test cases can inspect these variables, as well as the
variables saved in @file{site.exp}. These variables should never be
changed.

@table @code

@item $prms_id
The bug tracking system (eg. PRMS/GNATS) number identifying a
corresponding bug report (@emph{0} if you do not specify it).

@item $bug_id
An optional bug ID, perhaps a bug
identification number from another organization
(@emph{0} if you do not specify
it).

@item $subdir
The subdirectory for the current test case.

@item $exec_output
This is the output from a @code{$@{tool@}_load} command. This only
applies to tools like GCC and GAS which produce an object file that must
in turn be executed to complete a test.

@item $comp_output
This is the output from a @code{$@{tool@}_start} command.  This is
conventionally used for batch-oriented programs, like GCC and GAS, that
may produce interesting output (warnings, errors) without further
interaction.

@item $expect_out(buffer)
The output from the last command. This is an internal variable set by
Expect. More information can be found in the Expect manual.
@end table

@node Unit testing, Reference, Extending DejaGnu, Top
@chapter Unit testing

@menu
* What is unit testing?::
* The dejagnu.h header file: The dejagnu_h header file.
* C unit testing API::
* C++ unit testing API::
@end menu

@node What is unit testing?, The dejagnu_h header file, , Unit testing
@section What is unit testing?

Most regression testing as done by DejaGnu is system testing: the
complete application is tested all at once. Unit testing is for testing
single files, or small libraries. In this case, each file is linked with
a test case in C or C++, and each function or class and method is tested
in turn, with the test case having to check private data or global
variables to see if the function or method worked.

This works particularly well for testing APIs and at level where it is
easier to debug them, than by needing to trace through the entire
application. Also if there is a specification for the API to be tested,
the testcase can also function as a compliance test.

@node The dejagnu_h header file, C unit testing API, What is unit testing?, Unit testing
@section The dejagnu.h header file

DejaGnu uses a single header file, @file{dejagnu.h} to assist in unit
testing. As this file also produces its one test state output, it can be
run stand-alone, which is very useful for testing on embedded
systems. This header file has a C and C++ API for the test states, with
simple totals, and standardized output. Because the output has been
standardized, DejaGnu can be made to work with this test case, without
writing almost any Tcl. The library module, dejagnu.exp, will look for
the output messages, and then merge them into DejaGnu's.

@node C unit testing API, C++ unit testing API, The dejagnu_h header file, Unit testing
@section C unit testing API

All of the functions that take a @code{msg} parameter use a C @code{char
*} that is the message to be displayed. There currently is no support
for variable length arguments.

@itemize
@item
@code{pass} prints a message for a successful test completion.

@quotation
@t{@b{pass}(@i{msg});}
@end quotation

@item
@code{fail} prints a message for an unsuccessful test completion.

@quotation
@t{@b{fail}(@i{msg});}
@end quotation

@item
@code{untested} prints a message for an test case that isn't run for
some technical reason.

@quotation
@t{@b{untested}(@i{msg});}
@end quotation

@item
@code{unresolved} prints a message for an test case that is run, but
there is no clear result. These output states require a human to look
over the results to determine what happened.

@quotation
@t{@b{unresolved}(@i{msg});}
@end quotation

@item
@code{totals} prints out the total numbers of all the test state
outputs.

@quotation
@t{@b{totals}();}
@end quotation

@end itemize

@node C++ unit testing API, , C unit testing API, Unit testing
@section C++ unit testing API

All of the methods that take a @code{msg} parameter use a C char * or
STL string, that is the message to be displayed. There currently is no
support for variable length arguments.

@itemize

@item
@code{pass} prints a message for a successful test completion.

@quotation
@t{@b{TestState::pass}(@i{msg});}
@end quotation

@code{fail} prints a message for an unsuccessful test completion.

@quotation
@t{@b{TestState::fail}(@i{msg});}
@end quotation

@code{untested} prints a message for an test case that isn't run for
some reason.

@quotation
@t{@b{TestState::untested}(@i{msg});}
@end quotation

@item
@code{unresolved} prints a message for an test case that is run, but
there is no clear result. These output states require a human to look
over the results to determine what happened.

@quotation
@t{@b{TestState::unresolved}(@i{msg});}
@end quotation

@item
@code{totals} prints out the total numbers of all the test state
outputs.

@quotation
@t{@b{TestState::totals}(@i{});}
@end quotation

@end itemize

@node Reference, , Unit testing, Top
@chapter Reference

@menu
* Builtin Procedures::
@end menu

@node Builtin Procedures, , , Reference
@section Builtin Procedures

DejaGnu provides these Tcl procedures.

@menu
* Core Internal Procedures::
* Procedures For Remote Communication::
* Procedures For Using Utilities to Connect: connprocs.
* Procedures For Target Boards::
* Target Database Procedures: target database library file.
* Platform Dependent Procedures: platform dependent procedures.
* Utility Procedures::
* Libgloss, a free board support package (BSP): Libgloss.
* Debugging Procedures::
@end menu

@node Core Internal Procedures, Procedures For Remote Communication, , Builtin Procedures
@subsection Core Internal Procedures

@menu
* open_logs Procedure: open_logs procedure
* close_logs Procedure: close_logs procedure
* isbuild Procedure: isbuild procedure
* is_remote Procedure: is_remote procedure
* is3way Procedure: is3way procedure
* ishost Procedure: ishost procedure
* istarget Procedure: istarget procedure
* isnative Procedure: isnative procedure
* log_and_exit Procedure: log_and_exit procedure
* log_summary Procedure: log_summary procedure
* setup_xfail Procedure: setup_xfail procedure
* pass Procedure: pass procedure
* fail Procedure: fail procedure
* xpass Procedure: xpass procedure
* xfail Procedure: xfail procedure
* set_warning_threshold Procedure: set_warning_threshold procedure
* get_warning_threshold Procedure: get_warning_threshold procedure
* warning Procedure: warning procedure
* perror Procedure: perror procedure
* note Procedure: note procedure
* untested Procedure: untested procedure
* unresolved Procedure: unresolved procedure
* unsupported Procedure: unsupported procedure
* transform Procedure: transform procedure
* check_conditional_xfail Procedure: check_conditional_xfail procedure
* clear_xfail Procedure: clear_xfail procedure
* verbose Procedure: verbose procedure
* load_lib Procedure: load_lib procedure
@end menu

@node open_logs procedure, close_logs procedure, , Core Internal Procedures
@subsubsection open_logs Procedure

Open the output logs.

@quotation
@t{@b{open_logs}}
@end quotation

@node close_logs procedure, isbuild procedure, open_logs procedure, Core Internal Procedures
@subsubsection close_logs Procedure

Close the output logs.

@quotation
@t{@b{close_logs}}
@end quotation

@node isbuild procedure, is_remote procedure, close_logs procedure, Core Internal Procedures
@subsubsection isbuild Procedure

Tests for a particular build host environment.  If the currently
configured host matches the argument string, the result is @emph{1};
otherwise the result is @emph{0}.  @emph{host} must be a full three-part
configure host name; in particular, you may not use the shorter
nicknames supported by configure (but you can use wildcard characters,
using shell syntax, to specify sets of names). If it is passed a NULL
string, then it returns the name of the build canonical configuration.

@quotation
@t{@b{isbuild}@{@i{pattern}@}}
@end quotation

@table @asis

@item @code{pattern}
@end table

@node is_remote procedure, is3way procedure, isbuild procedure, Core Internal Procedures
@subsubsection is_remote Procedure

Is @i{board} remote? Return a non-zero value, if so.

@quotation
@t{@b{is_remote} @{@i{ board }@}}
@end quotation

@node is3way procedure, ishost procedure, is_remote procedure, Core Internal Procedures
@subsubsection is3way Procedure

Tests for a Canadian cross. This is when the tests will be run on a
remotely hosted cross-compiler. If it is a Canadian cross, then the
result is @emph{1}; otherwise @emph{0}.

@quotation
@t{@b{is3way}}
@end quotation

@node ishost procedure, istarget procedure, is3way procedure, Core Internal Procedures
@subsubsection ishost Procedure

Tests for a particular host environment.  If the currently configured
host matches the argument string, the result is @emph{1}; otherwise the
result is @emph{0}. @emph{host} must be a full three-part configure host
name; in particular, you may not use the shorter nicknames supported by
configure (but you can use wildcard characters, using shell syntax, to
specify sets of names).

@quotation
@t{@b{ishost}@{@i{pattern}@}}
@end quotation

@table @asis

@item @code{}
@end table

@node istarget procedure, isnative procedure, ishost procedure, Core Internal Procedures
@subsubsection istarget Procedure

Tests for a particular target environment.  If the currently configured
target matches the argument string, the result is @emph{1} ; otherwise
the result is @emph{0}.  target must be a full three-part configure
target name; in particular, you may not use the shorter nicknames
supported by configure (but you can use wildcard characters, using shell
syntax, to specify sets of names). If it is passed a @emph{NULL} string,
then it returns the name of the build canonical configuration.

@quotation
@t{@b{istarget} @{ @i{args} @}}
@end quotation

@table @asis
@item @code{}
@end table

@node isnative procedure, log_and_exit procedure, istarget procedure, Core Internal Procedures
@subsubsection isnative Procedure

Tests whether the current configuration has the same host and
target. When it runs in a native configuration this procedure returns a
@emph{1}; otherwise it returns a @emph{0}.

@quotation
@t{@b{isnative}}
@end quotation

@node log_and_exit procedure, log_summary procedure, isnative procedure, Core Internal Procedures
@subsubsection log_and_exit Procedure


@quotation
@t{@b{log_and_exit}}
@end quotation

@node log_summary procedure, setup_xfail procedure, log_and_exit procedure, Core Internal Procedures
@subsubsection log_summary Procedure


@quotation
@t{@b{log_summary}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node setup_xfail procedure, pass procedure, log_summary procedure, Core Internal Procedures
@subsubsection setup_xfail Procedure

Declares that the test is expected to fail on a particular set of
configurations.  The config argument must be a list of full three-part
configure target name; in particular, you may not use the shorter
nicknames supported by configure (but you can use the common shell
wildcard characters to specify sets of names).  The @emph{bugid}
argument is optional, and used only in the logging file output; use it
as a link to a bug-tracking system such as GNATS.

Once you use @code{setup_xfail}, the @code{fail} and @code{pass}
procedures produce the messages @emph{XFAIL} and @emph{XPASS}
respectively, allowing you to distinguish expected failures (and
unexpected success!) from other test outcomes.

@quotation

@strong{Warning}

Warning you must clear the expected failure after using setup_xfail in a
test case.  Any call to @code{pass }or @code{fail} clears the expected
failure implicitly; if the test has some other outcome, e.g. an error,
you can call @code{clear_xfail} to clear the expected failure
explicitly.  Otherwise, the expected-failure declaration applies to
whatever test runs next, leading to surprising results.
@end quotation

@quotation
@t{@b{setup_xfail}@{@i{config}
@i{bugid}@}}
@end quotation

@table @asis
@item @code{config}
The config triplet to trigger whether this is an unexpected or expect
failure.

@item @code{bugid}
The optional bugid, used to tie this test case to a bug tracking system.
@end table

@node pass procedure, fail procedure, setup_xfail procedure, Core Internal Procedures
@subsubsection pass Procedure

Declares a test to have passed. @code{pass} writes in the log files a
message beginning with @emph{PASS} (or @emph{XPASS}, if failure was
expected), appending the argument @code{string}.

@quotation
@t{@b{pass} @{ @i{message} @}}
@end quotation

@table @asis

@item @code{message}
The message to use in the PASS result.
@end table

@node fail procedure, xpass procedure, pass procedure, Core Internal Procedures
@subsubsection fail Procedure

Declares a test to have failed.  @code{fail} writes in the log files a
message beginning with @emph{FAIL} (or @emph{XFAIL}, if failure was
expected), appending the argument @code{string}.

@quotation
@t{@b{fail} @{ @i{message} @}}
@end quotation

@table @asis
@item @code{string}
The message to use in the FAIL result.
@end table

@node xpass procedure, xfail procedure, fail procedure, Core Internal Procedures
@subsubsection xpass Procedure

Declares a test to have passed when it was expected to fail.
@code{xpass} writes in the log files a message beginning with
@emph{XPASS} (or @emph{XFAIL}, if failure was expected), appending the
argument @code{string}.

@quotation
@t{@b{xpass} @{ @i{message} @}}
@end quotation

@table @asis
@item @code{message}
The message to use in the XPASS result.
@end table

@node xfail procedure, set_warning_threshold procedure, xpass procedure, Core Internal Procedures
@subsubsection xfail Procedure

Declares a test to have expectedly failed. @code{xfail} writes in the
log files a message beginning with @emph{XFAIL} (or @emph{PASS}, if
success was expected), appending the @code{message} argument.

@quotation
@t{@b{xpass} @{ @i{message} @}}
@end quotation

@node set_warning_threshold procedure, get_warning_threshold procedure, xfail procedure, Core Internal Procedures
@subsubsection set_warning_threshold Procedure

Sets the value of @code{warning_threshold}. A value of @emph{0} disables
it: calls to @code{warning} will not turn a @emph{PASS} or @emph{FAIL}
into an @emph{UNRESOLVED}.

@quotation
@t{@b{set_warning_threshold}@{@i{threshold}@}}
@end quotation

@table @asis

@item @code{threshold}
This is the value of the new warning threshold.
@end table

@node get_warning_threshold procedure, warning procedure, set_warning_threshold procedure, Core Internal Procedures
@subsubsection get_warning_threshold Procedure

Returns the current value of @code{@{warning_threshold}. The default
value is 3. This value controls how many @code{warning} procedures can
be called before becoming @emph{UNRESOLVED}.

@quotation
@t{@b{get_warning_threshold}}
@end quotation

@node warning procedure, perror procedure, get_warning_threshold procedure, Core Internal Procedures
@subsubsection warning Procedure

Declares detection of a minor error in the test case
itself. @code{warning} writes in the log files a message beginning with
@emph{WARNING}, appending the argument @code{string}.  Use
@code{warning} rather than @code{perror} for cases (such as
communication failure to be followed by a retry) where the test case can
recover from the error. If the optional @code{number} is supplied, then
this is used to set the internal count of warnings to that value.

As a side effect, @code{warning_threshold} or more calls to warning in a
single test case also changes the effect of the next @code{pass} or
@code{fail} command: the test outcome becomes @emph{UNRESOLVED} since an
automatic @emph{PASS} or @emph{FAIL} may not be trustworthy after many
warnings.  If the optional numeric value is @emph{0}, then there are no
further side effects to calling this function, and the following test
outcome doesn't become @emph{UNRESOLVED}. This can be used for errors
with no known side effects.

@quotation
@t{@b{warning} @{ @i{messsage} @i{number} @}}
@end quotation

@table @asis

@item @code{message}
The warning message.

@item @code{number}
The optional number to set the error counter. This is only used to fake
out the counter when using the @code{xfail} procedure to control when it
flips the output over to @emph{UNRESOLVED} state.
@end table

@node perror procedure, note procedure, warning procedure, Core Internal Procedures
@subsubsection perror Procedure

Declares a severe error in the testing framework itself. @code{perror}
writes in the log files a message beginning with @emph{ERROR}, appending
the argument @code{string}.

As a side effect, perror also changes the effect of the next @code{pass}
or @code{fail} command: the test outcome becomes @emph{UNRESOLVED},
since an automatic @emph{PASS} or @emph{FAIL} cannot be trusted after a
severe error in the test framework.  If the optional numeric value is
@emph{0}, then there are no further side effects to calling this
function, and the following test outcome doesn't become
@emph{UNRESOLVED}. This can be used for errors with no known side
effects.

@quotation
@t{@b{perror} @{ @i{message} @i{number} @}}
@end quotation

@table @asis
@item @code{message}
The message to be logged.

@item @code{number}
The optional number to set the error counter. This is only used to fake
out the counter when using the @code{xfail} procedure to control when it
flips the output over to @emph{UNRESOLVED} state.
@end table

@node note procedure, untested procedure, perror procedure, Core Internal Procedures
@subsubsection note Procedure

Appends an informational message to the log file. @code{note} writes in
the log files a message beginning with @emph{NOTE}, appending the
argument @code{string}.  Use @code{note} sparingly. The @code{verbose}
should be used for most such messages, but in cases where a message is
needed in the log file regardless of the verbosity level use
@code{note}.

@quotation
@t{@b{note} @{ @i{string} @}}
@end quotation

@table @asis

@item @code{string}
The string to use for this note.
@end table

@node untested procedure, unresolved procedure, note procedure, Core Internal Procedures
@subsubsection untested Procedure

Declares a test was not run. @code{untested} writes in the log file a
message beginning with @emph{UNTESTED}, appending the argument
@emph{string}. For example, you might use this in a dummy test whose
only role is to record that a test does not yet exist for some feature.

@quotation
@t{@b{untested} @{ @i{message} @}}
@end quotation

@table @asis
@item @code{message}
The message to use.
@end table

@node unresolved procedure, unsupported procedure, untested procedure, Core Internal Procedures
@subsubsection unresolved Procedure

Declares a test to have an unresolved outcome. @code{unresolved} writes
in the log file a message beginning with @emph{UNRESOLVED}, appending
the argument @emph{string}.  This usually means the test did not execute
as expected, and a human being must go over results to determine if it
passed or failed (and to improve the test case).

@quotation
@t{@b{unresolved} @{ @i{message} @}}
@end quotation

@table @asis
@item @code{string}
The message to use.
@end table

@node unsupported procedure, transform procedure, unresolved procedure, Core Internal Procedures
@subsubsection unsupported Procedure

Declares that a test case depends on some facility that does not
exist in the testing environment. @code{unsupported}
writes in the log file a message beginning with
@emph{UNSUPPORTED}, appending the argument string.

@quotation
@t{@b{unsupported} @{ @i{message} @}}
@end quotation
@table @asis

@item @code{message}
The message to use.
@end table

@node transform procedure, check_conditional_xfail procedure, unsupported procedure, Core Internal Procedures
@subsubsection transform Procedure

Generates a string for the name of a tool as it was configured and
installed, given its native name (as the argument @code{toolname}). This
makes the assumption that all tools are installed using the same naming
conventions: For example, for a cross compiler supporting the
@emph{m68k-vxworks} configuration, the result of transform @code{gcc} is
@code{m68k-vxworks-gcc}.

@quotation
@t{@b{transform}@{@i{toolname}@}}
@end quotation

@table @asis

@item @code{toolname}
The name of the cross-development program to
transform.
@end table

@node check_conditional_xfail procedure, clear_xfail procedure, transform procedure, Core Internal Procedures
@subsubsection check_conditional_xfail Procedure

This procedure adds a conditional xfail, based on compiler
options used to create a test case executable. If an include options
is found in the compiler flags, and it's the right architecture,
it'll trigger an @emph{XFAIL}. Otherwise it'll produce
an ordinary @emph{FAIL}. You can also specify flags to
exclude. This makes a result be a @emph{FAIL}, even if
the included options are found. To set the conditional, set
the variable @code{compiler_conditional_xfail_data} to the
fields

@example
"[message string] [targets list] [includes list] [excludes list]"
@end example

(descriptions below). This is the checked at pass/fail decision time, so
there is no need to call the procedure yourself, unless you wish to know
if it gets triggered. After a pass/fail, the variable is reset, so it
doesn't effect other tests. It returns @emph{1} if the conditional is
true, or @emph{0} if the conditional is false.

@quotation
@t{@b{check_conditional_xfail}@{@i{message}
@i{targets}
@i{includes}
@i{excludes}@}}
@end quotation

@table @asis

@item @code{message}
This is the message to print with the normal test result.

@item @code{targets}
This is a string with the list targets to activate this conditional on.

@item @code{includes}
This is a list of sets of options to search for in the compiler options
to activate this conditional.  If the list of sets of options is empty
or if any set of the options matches, then this conditional is true.
(It may be useful to specify an empty list of include sets if the
conditional is always true unless one of the exclude sets matches.)

@item @code{excludes}
This is a list of sets of options to search for in the compiler options
to activate this conditional. If any set of the options matches,
(regardless of whether any of the include sets match) then this
conditional is de-activated.
@end table

@strong{Specifying the conditional xfail data}

@example
	  set compiler_conditional_xfail_data @{ \
	       "I sure wish I knew why this was hosed" \
               "sparc*-sun*-* *-pc-*-*" \
               @{"-Wall -v" "-O3"@} \
               @{"-O1" "-Map"@} \
          @}
@end example

What this does is it matches only for these two targets if
"-Wall -v" or  "-O3" is set, but neither "-O1" or "-Map" is set. For
a set to match, the options specified are searched for independently
of each other, so a "-Wall -v" matches either "-Wall -v" or "-v
-Wall". A space separates the options in the string. Glob-style
regular expressions are also permitted.

@node clear_xfail procedure, verbose procedure, check_conditional_xfail procedure, Core Internal Procedures
@subsubsection clear_xfail Procedure

Cancel an expected failure (previously declared with @code{setup_xfail})
for a particular set of configurations.  The @code{config} argument is a
list of configuration target names.  It is only necessary to call
@code{clear_xfail} if a test case ends without calling either
@code{pass} or @code{fail}, after calling @code{setup_xfail}.

@quotation
@t{@b{clear_xfail}@{@i{config}@}}
@end quotation

@table @asis

@item @code{config}
The system triplets to clear.
@end table

@node verbose procedure, load_lib procedure, clear_xfail procedure, Core Internal Procedures
@subsubsection verbose Procedure

Test cases can use this function to issue helpful messages depending on
the number of @code{-v}/@code{--verbose} options passed to runtest on
the command line.  It prints @i{string} if the value of the variable
@code{verbose} is higher than or equal to the optional @i{loglevel}. The
default log level is 1.  Use the optional @code{-log} argument to cause
string to always be added to the log file, even if it won't be printed.
Use the optional @code{-x} argument to log the test results into a
parsable XML file.  Use the optional @code{-n} argument to print string
without a trailing newline.  Use the optional @code{--} argument if
string begins with "-".

@quotation
@t{@b{verbose}@{@i{-log}
@i{-x}
@i{-n}
@i{-r}
@i{string}
@i{loglevel}@}}
@end quotation

@table @asis

@item @code{-x}

@item @code{-log}

@item @code{-n}

@item @code{--}

@item @code{string}

@item @code{number}
@end table

@node load_lib procedure, , verbose procedure, Core Internal Procedures
@subsubsection load_lib Procedure

Loads a DejaGnu library file by searching the default fixed paths built
into DejaGnu. If DejaGnu has been installed, it looks in a path starting
with the installed library directory.  If you are running DejaGnu
directly from a source directory, without first running @code{make
install}, this path defaults to the current directory.  In either case,
it then looks in the current directory for a directory called
@file{lib}.  If there are duplicate definitions, the last one loaded
takes precedence over the earlier ones.

@quotation
@t{@b{load_lib}@{@i{filespec}@}}
@end quotation

@table @asis

@item @code{filespec}
The name of the DejaGnu library file to load.
@end table

The global variable @code{libdirs}, handled as a list, is appended to
the default fixed paths built into DejaGnu.

@strong{Additional search directories for load_lib}

@example
# append a non-standard search path
	    global libdirs
	    lappend libdirs $srcdir/../../gcc/testsuite/lib
	    # now loading $srcdir/../../gcc/testsuite/lib/foo.exp works
	    load_lib foo.exp
@end example

@node Procedures For Remote Communication, connprocs, Core Internal Procedures, Builtin Procedures
@subsection Procedures For Remote Communication

@file{lib/remote.exp} defines procedures for establishing and managing
communications. Each of these procedures tries to establish the
connection up to three times before returning. Warnings (if retries will
continue) or errors (if the attempt is abandoned) report on
communication failures.  The result for any of these procedures is
either @emph{-1}, when the connection cannot be established, or the
spawn ID returned by the Expect command @code{spawn}.

It use the value of the @code{connect} field in the @code{target_info}
array (was @code{connectmode} as the type of connection to make. Current
supported connection types are ssh, tip, kermit, telnet, rsh, and
rlogin. If the @code{--reboot} option was used on the runtest command
line, then the target is rebooted before the connection is made.

@menu
* call_remote Procedure: call_remote procedure
* check_for_board_status Procedure: check_for_board_status procedure
* file_on_build Procedure: file_on_build procedure
* file_on_host Procedure: file_on_host procedure
* local_exec Procedure: local_exec procedure
* remote_binary Procedure: remote_binary procedure
* remote_close Procedure: remote_close procedure
* remote_download Procedure: remote_download procedure
* remote_exec Procedure: remote_exec procedure
* remote_expect Procedure: remote_expect procedure
* remote_file Procedure: remote_file procedure
* remote_ld Procedure: remote_ld procedure
* remote_load Procedure: remote_load procedure
* remote_open Procedure: remote_open procedure
* remote_pop_conn Procedure: remote_pop_conn procedure
* remote_push_conn Procedure: remote_push_conn procedure
* remote_raw_binary Procedure: remote_raw_binary procedure
* remote_raw_close Procedure: remote_raw_close procedure
* remote_raw_file Procedure: remote_raw_file procedure
* remote_raw_ld Procedure: remote_raw_ld procedure
* remote_raw_load Procedure: remote_raw_load procedure
* remote_raw_open Procedure: remote_raw_open procedure
* remote_raw_send Procedure: remote_raw_send procedure
* remote_raw_spawn Procedure: remote_raw_spawn procedure
* remote_raw_transmit Procedure: remote_raw_transmit procedure
* remote_raw_wait Procedure: remote_raw_wait procedure
* remote_reboot Procedure: remote_reboot procedure
* remote_send Procedure: remote_send procedure
* remote_spawn Procedure: remote_spawn procedure
* remote_swap_conn Procedure: remote_swap_conn procedure
* remote_transmit Procedure: remote_transmit procedure
* remote_upload Procedure: remote_upload procedure
* remote_wait Procedure: remote_wait procedure
* standard_close Procedure: standard_close procedure
* standard_download Procedure: standard_download procedure
* standard_exec Procedure: standard_exec procedure
* standard_file Procedure: standard_file procedure
* standard_load Procedure: standard_load procedure
* standard_reboot Procedure: standard_reboot procedure
* standard_send Procedure: standard_send procedure
* standard_spawn Procedure: standard_spawn procedure
* standard_transmit Procedure: standard_transmit procedure
* standard_upload Procedure: standard_upload procedure
* standard_wait Procedure: standard_wait procedure
* unix_clean_filename Procedure: unix_clean_filename procedure
@end menu

@node call_remote procedure, check_for_board_status procedure, , Procedures For Remote Communication
@subsubsection call_remote Procedure


@quotation
@t{@b{call_remote}@{@i{type}
@i{proc}
@i{dest}
@i{args}@}}
@end quotation

@table @asis
@item @code{proc}
@item @code{dest}
@item @code{args}
@end table

@node check_for_board_status procedure, file_on_build procedure, call_remote procedure, Procedures For Remote Communication
@subsubsection check_for_board_status Procedure


@quotation
@t{@b{check_for_board_status}@{@i{variable}@}}
@end quotation

@table @asis

@item @code{variable}
@end table

@node file_on_build procedure, file_on_host procedure, check_for_board_status procedure, Procedures For Remote Communication
@subsubsection file_on_build Procedure


@quotation
@t{@b{file_on_build}@{@i{op}
@i{file}
@i{args}@}}
@end quotation

@table @asis
@item @code{op}
@item @code{file}
@item @code{args}
@end table

@node file_on_host procedure, local_exec procedure, file_on_build procedure, Procedures For Remote Communication
@subsubsection file_on_host Procedure


@quotation
@t{@b{file_on_host}@{@i{op}
@i{file}
@i{args}@}}
@end quotation

@table @asis
@item @code{op}
@item @code{file}
@item @code{args}
@end table

@node local_exec procedure, remote_binary procedure, file_on_host procedure, Procedures For Remote Communication
@subsubsection local_exec Procedure


@quotation
@t{@b{local_exec}@{@i{commandline}
@i{inp}
@i{outp}
@i{timeout}@}}
@end quotation

@table @asis
@item @code{inp}
@item @code{outp}
@item @code{timeout}
@end table

@node remote_binary procedure, remote_close procedure, local_exec procedure, Procedures For Remote Communication
@subsubsection remote_binary Procedure


@quotation
@t{@b{remote_binary}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_close procedure, remote_download procedure, remote_binary procedure, Procedures For Remote Communication
@subsubsection remote_close Procedure

@quotation
@t{@b{remote_close}@{@i{shellid}@}}
@end quotation

@table @asis

@item @code{shellid}
This is the value returned by a call to @code{remote_open}. This closes
the connection to the target so resources can be used by others. This
parameter can be left off if the @code{fileid} field in the
@code{target_info} array is set.
@end table

@node remote_download procedure, remote_exec procedure, remote_close procedure, Procedures For Remote Communication
@subsubsection remote_download Procedure


@quotation
@t{@b{remote_download}@{@i{dest}
@i{file}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@item @code{args}
@end table

@node remote_exec procedure, remote_expect procedure, remote_download procedure, Procedures For Remote Communication
@subsubsection remote_exec Procedure


@quotation
@t{@b{remote_exec}@{@i{hostname}
@i{program}
@i{args}@}}
@end quotation

@table @asis
@item @code{hostname}
@item @code{program}
@item @code{args}
@end table

@node remote_expect procedure, remote_file procedure, remote_exec procedure, Procedures For Remote Communication
@subsubsection remote_expect Procedure


@quotation
@t{@b{remote_expect}@{@i{board}
@i{timeout}
@i{args}@}}
@end quotation

@table @asis
@item @code{board}
@item @code{timeout}
@item @code{args}
@end table

@node remote_file procedure, remote_ld procedure, remote_expect procedure, Procedures For Remote Communication
@subsubsection remote_file Procedure


@quotation
@t{@b{remote_file}@{@i{dest}
@i{args}@}}
@end quotation

@table @asis

@item @code{dest}

@item @code{args}
@end table

@node remote_ld procedure, remote_load procedure, remote_file procedure, Procedures For Remote Communication
@subsubsection remote_ld Procedure

@quotation
@t{@b{remote_ld}@{@i{dest}
@i{prog}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{prog}
@end table

@node remote_load procedure, remote_open procedure, remote_ld procedure, Procedures For Remote Communication
@subsubsection remote_load Procedure


@quotation
@t{@b{remote_load}@{@i{dest}
@i{prog}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{prog}
@item @code{args}
@end table

@node remote_open procedure, remote_pop_conn procedure, remote_load procedure, Procedures For Remote Communication
@subsubsection remote_open Procedure


@quotation
@t{@b{remote_open}@{@i{type}@}}
@end quotation

@table @asis

@item @code{type}
This is passed @code{host} or @code{target}. Host or target refers to
whether it is a connection to a remote target, or a remote host. This
opens the connection to the desired target or host using the default
values in the configuration system. It returns that @code{spawn_id} of
the process that manages the connection. This value can be used in
Expect or @code{exp_send} statements, or passed to other procedures that
need the connection process's id. This also sets the @code{fileid} field
in the @code{target_info} array.
@end table

@node remote_pop_conn procedure, remote_push_conn procedure, remote_open procedure, Procedures For Remote Communication
@subsubsection remote_pop_conn Procedure


@quotation
@t{@b{remote_pop_conn}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_push_conn procedure, remote_raw_binary procedure, remote_pop_conn procedure, Procedures For Remote Communication
@subsubsection remote_push_conn Procedure


@quotation
@t{@b{remote_push_conn}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_raw_binary procedure, remote_raw_close procedure, remote_push_conn procedure, Procedures For Remote Communication
@subsubsection remote_raw_binary Procedure


@quotation
@t{@b{remote_raw_binary}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_raw_close procedure, remote_raw_file procedure, remote_raw_binary procedure, Procedures For Remote Communication
@subsubsection remote_raw_close Procedure


@quotation
@t{@b{remote_raw_close}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_raw_file procedure, remote_raw_ld procedure, remote_raw_close procedure, Procedures For Remote Communication
@subsubsection remote_raw_file Procedure


@quotation
@t{@b{remote_raw_file}@{@i{dest}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}

@item @code{args}
@end table

@node remote_raw_ld procedure, remote_raw_load procedure, remote_raw_file procedure, Procedures For Remote Communication
@subsubsection remote_raw_ld Procedure


@quotation
@t{@b{remote_raw_ld}@{@i{dest}
@i{prog}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{prog}
@end table

@node remote_raw_load procedure, remote_raw_open procedure, remote_raw_ld procedure, Procedures For Remote Communication
@subsubsection remote_raw_load Procedure


@quotation
@t{@b{remote_raw_load}@{@i{dest}
@i{prog}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{prog}
@item @code{args}
@end table

@node remote_raw_open procedure, remote_raw_send procedure, remote_raw_load procedure, Procedures For Remote Communication
@subsubsection remote_raw_open Procedure


@quotation
@t{@b{remote_raw_open}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node remote_raw_send procedure, remote_raw_spawn procedure, remote_raw_open procedure, Procedures For Remote Communication
@subsubsection remote_raw_send Procedure


@quotation

@t{@b{remote_raw_send}@{@i{dest}
@i{string}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{string}
@end table

@node remote_raw_spawn procedure, remote_raw_transmit procedure, remote_raw_send procedure, Procedures For Remote Communication
@subsubsection remote_raw_spawn Procedure


@quotation
@t{@b{remote_raw_spawn}@{@i{dest}
@i{commandline}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{commandline}
@end table

@node remote_raw_transmit procedure, remote_raw_wait procedure, remote_raw_spawn procedure, Procedures For Remote Communication
@subsubsection remote_raw_transmit Procedure


@quotation
@t{@b{remote_raw_transmit}@{@i{dest}
@i{file}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@end table

@node remote_raw_wait procedure, remote_reboot procedure, remote_raw_transmit procedure, Procedures For Remote Communication
@subsubsection remote_raw_wait Procedure


@quotation
@t{@b{remote_raw_wait}@{@i{dest}
@i{timeout}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{timeout}
@end table

@node remote_reboot procedure, remote_send procedure, remote_raw_wait procedure, Procedures For Remote Communication
@subsubsection remote_reboot Procedure

Return value of this function depends on actual implementation
of reboot that will be used, in practice it is expected that
@code{remote_reboot} returns @emph{1}
on success and @emph{0} on failure.

@quotation
@t{@b{remote_reboot}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node remote_send procedure, remote_spawn procedure, remote_reboot procedure, Procedures For Remote Communication
@subsubsection remote_send Procedure

@quotation
@t{@b{remote_send}@{@i{dest}
@i{string}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{string}
@end table

@node remote_spawn procedure, remote_swap_conn procedure, remote_send procedure, Procedures For Remote Communication
@subsubsection remote_spawn Procedure


@quotation
@t{@b{remote_spawn}@{@i{dest}
@i{commandline}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{commandline}
@item @code{args}
@end table

@node remote_swap_conn procedure, remote_transmit procedure, remote_spawn procedure, Procedures For Remote Communication
@subsubsection remote_swap_conn Procedure

@quotation
@t{@b{remote_swap_conn}@{@i{host}@}}
@end quotation

@table @asis
@item @code{}
@end table

@node remote_transmit procedure, remote_upload procedure, remote_swap_conn procedure, Procedures For Remote Communication
@subsubsection remote_transmit Procedure


@quotation
@t{@b{remote_transmit}@{@i{dest}
@i{file}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@end table

@node remote_upload procedure, remote_wait procedure, remote_transmit procedure, Procedures For Remote Communication
@subsubsection remote_upload Procedure


@quotation
@t{@b{remote_upload}@{@i{dest}
@i{srcfile}
@i{arg}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{srcfile}
@item @code{arg}
@end table

@node remote_wait procedure, standard_close procedure, remote_upload procedure, Procedures For Remote Communication
@subsubsection remote_wait Procedure


@quotation
@t{@b{remote_wait}@{@i{dest}
@i{timeout}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{timeout}
@end table

@node standard_close procedure, standard_download procedure, remote_wait procedure, Procedures For Remote Communication
@subsubsection standard_close Procedure

@quotation
@t{@b{standard_close}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node standard_download procedure, standard_exec procedure, standard_close procedure, Procedures For Remote Communication
@subsubsection standard_download Procedure


@quotation
@t{@b{standard_download}@{@i{dest}
@i{file}
@i{destfile}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@item @code{destfile}
@end table

@node standard_exec procedure, standard_file procedure, standard_download procedure, Procedures For Remote Communication
@subsubsection standard_exec Procedure


@quotation
@t{@b{standard_exec}@{@i{hostname}
@i{args}@}}
@end quotation

@table @asis
@item @code{hostname}
@item @code{args}
@end table

@node standard_file procedure, standard_load procedure, standard_exec procedure, Procedures For Remote Communication
@subsubsection standard_file Procedure


@quotation
@t{@b{standard_file}@{@i{dest}
@i{op}
@i{args}@}}
@end quotation

@table @asis
@item @code{}
@end table

@node standard_load procedure, standard_reboot procedure, standard_file procedure, Procedures For Remote Communication
@subsubsection standard_load Procedure


@quotation
@t{@b{standard_load}@{@i{dest}
@i{prog}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{prog}
@item @code{args}
@end table

@node standard_reboot procedure, standard_send procedure, standard_load procedure, Procedures For Remote Communication
@subsubsection standard_reboot Procedure

It looks like that this procedure is never called, instead
@code{$@{board@}_reboot} defined in @file{base-config.exp} will be used
because it has higher priority and @file{base-config.exp} is always
imported by @code{runtest}.

@quotation
@t{@b{standard_reboot}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node standard_send procedure, standard_spawn procedure, standard_reboot procedure, Procedures For Remote Communication
@subsubsection standard_send Procedure


@quotation
@t{@b{standard_send}@{@i{dest}
@i{string}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{string}
@end table

@node standard_spawn procedure, standard_transmit procedure, standard_send procedure, Procedures For Remote Communication
@subsubsection standard_spawn Procedure


@quotation
@t{@b{standard_spawn}@{@i{dest}
@i{commandline}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{commandline}
@end table

@node standard_transmit procedure, standard_upload procedure, standard_spawn procedure, Procedures For Remote Communication
@subsubsection standard_transmit Procedure


@quotation
@t{@b{standard_transmit}@{@i{dest}
@i{file}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@end table

@node standard_upload procedure, standard_wait procedure, standard_transmit procedure, Procedures For Remote Communication
@subsubsection standard_upload Procedure


@quotation
@t{@b{standard_upload}@{@i{dest srcfile destfile}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{srcfile}
@item @code{destfile}
@end table

@node standard_wait procedure, unix_clean_filename procedure, standard_upload procedure, Procedures For Remote Communication
@subsubsection standard_wait Procedure


@quotation
@t{@b{standard_wait}@{@i{dest}
@i{timeout}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{timeout}
@end table

@node unix_clean_filename procedure, , standard_wait procedure, Procedures For Remote Communication
@subsubsection unix_clean_filename Procedure


@quotation
@t{@b{unix_clean_filename}@{@i{dest}
@i{file}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@end table

@node connprocs, Procedures For Target Boards, Procedures For Remote Communication, Builtin Procedures
@subsection Procedures For Using Utilities to Connect

@menu
* telnet Procedure: telnet procedure
* rsh Procedure: rsh procedure
* tip Procedure: tip procedure
* kermit Procedure: kermit procedure
* kermit_open Procedure: kermit_open procedure
* kermit_command Procedure: kermit_command procedure
* kermit_send Procedure: kermit_send procedure
* kermit_transmit Procedure: kermit_transmit procedure
* telnet_open Procedure: telnet_open procedure
* telnet_binary Procedure: telnet_binary procedure
* telnet_transmit Procedure: telnet_transmit procedure
* tip_open Procedure: tip_open procedure
* rlogin_open Procedure: rlogin_open procedure
* rlogin_spawn Procedure: rlogin_spawn procedure
* rsh_open Procedure: rsh_open procedure
* rsh_download Procedure: rsh_download procedure
* rsh_upload Procedure: rsh_upload procedure
* rsh_exec Procedure: rsh_exec procedure
* ssh_close Procedure: ssh_close procedure
* ssh_exec Procedure: ssh_exec procedure
* ssh_download Procedure: ssh_download procedure
* ssh_upload Procedure: ssh_upload procedure
* ftp_open Procedure: ftp_open procedure
* ftp_upload Procedure: ftp_upload procedure
* ftp_download Procedure: ftp_download procedure
* ftp_close Procedure: ftp_close procedure
* tip_download Procedure: tip_download procedure
@end menu

@node telnet procedure, rsh procedure, , connprocs
@subsubsection telnet Procedure


@quotation
@t{@b{telnet}@{@i{hostname}
@i{port}@}}
@end quotation

@quotation
@t{@b{rlogin}@{@i{hostname}@}}
@end quotation

@node rsh procedure, tip procedure, telnet procedure, connprocs
@subsubsection rsh Procedure

@quotation
@t{@b{rsh}@{@i{hostname}@}}
@end quotation

@table @asis

@item @code{hostname}
This refers to the IP address or name (for example, an entry in
@file{/etc/hosts}) for this target. The procedure names reflect the Unix
utility used to establish a connection. The optional @code{port} is used
to specify the IP port number. The value of the @code{netport} field in
the @code{target_info} array is used. (was @code{$netport}) This value
has two parts, the hostname and the port number, separated by a
@emph{:}. If host or target is used in the @code{hostname} field, than
the config array is used for all information.
@end table

@node tip procedure, kermit procedure, rsh procedure, connprocs
@subsubsection tip Procedure


@quotation
@t{@b{tip}@{@i{port}@}}
@end quotation

@table @asis

@item @code{port}
Connect using the Unix utility @code{tip}. @code{Port}must be a name
from the tip configuration file @file{/etc/remote}. Often, this is
called @code{hardwire}, or something like @code{ttya}. This file holds
all the configuration data for the serial port. The value of the
@code{serial} field in the @code{target_info} array is used. (was
@code{$serialport}) If @code{host} or @code{target} is used in the
@code{port} field, than the config array is used for all
information. the config array is used for all information.
@end table

@node kermit procedure, kermit_open procedure, tip procedure, connprocs
@subsubsection kermit Procedure


@quotation
@t{@b{kermit}@{@i{port}
@i{bps}@}}
@end quotation

@table @asis
@item @code{port}
Connect using the program @code{kermit}. @code{Port} is the device name,
e.g. @file{/dev/ttyb}.

@item @code{bps}
@code{bps} is the line speed to use (in its per second) for the
connection. The value of the @code{serial} field in the
@code{target_info} array is used.  (was @code{$serialport}) If
@code{host} or @code{target} is used in the @code{port} field, than the
config array is used for all information. the config array is used for
all information.
@end table

@node kermit_open procedure, kermit_command procedure, kermit procedure, connprocs
@subsubsection kermit_open Procedure


@quotation
@t{@b{kermit_open}@{@i{dest}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{args}
@end table

@node kermit_command procedure, kermit_send procedure, kermit_open procedure, connprocs
@subsubsection kermit_command Procedure


@quotation
@t{@b{kermit_command}@{@i{dest}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{args}
@end table

@node kermit_send procedure, kermit_transmit procedure, kermit_command procedure, connprocs
@subsubsection kermit_send Procedure


@quotation
@t{@b{kermit_send}@{@i{dest string args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{string}
@item @code{args}
@end table

@node kermit_transmit procedure, telnet_open procedure, kermit_send procedure, connprocs
@subsubsection kermit_transmit Procedure


@quotation
@t{@b{kermit_transmit}@{@i{dest}
@i{file}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@item @code{args}
@end table

@node telnet_open procedure, telnet_binary procedure, kermit_transmit procedure, connprocs
@subsubsection telnet_open Procedure


@quotation
@t{@b{telnet_open}@{@i{hostname}
@i{args}@}}
@end quotation

@table @asis
@item @code{hostname}
@item @code{args}
@end table

@node telnet_binary procedure, telnet_transmit procedure, telnet_open procedure, connprocs
@subsubsection telnet_binary Procedure


@quotation
@t{@b{telnet_binary}@{@i{hostname}@}}
@end quotation

@table @asis
@item @code{hostname}
@end table

@node telnet_transmit procedure, tip_open procedure, telnet_binary procedure, connprocs
@subsubsection telnet_transmit Procedure


@quotation
@t{@b{telnet_transmit}@{@i{dest}
@i{file}
@i{args}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{file}
@item @code{args}
@end table

@node tip_open procedure, rlogin_open procedure, telnet_transmit procedure, connprocs
@subsubsection tip_open Procedure


@quotation
@t{@b{tip_open}@{@i{hostname}@}}
@end quotation

@table @asis
@item @code{hostname}
@end table

@node rlogin_open procedure, rlogin_spawn procedure, tip_open procedure, connprocs
@subsubsection rlogin_open Procedure


@quotation
@t{@b{rlogin_open}@{@i{arg}@}}
@end quotation

@table @asis
@item @code{arg}
@end table

@node rlogin_spawn procedure, rsh_open procedure, rlogin_open procedure, connprocs
@subsubsection rlogin_spawn Procedure


@quotation
@t{@b{rlogin_spawn}@{@i{dest}
@i{cmdline}@}}
@end quotation

@table @asis
@item @code{dest}
@item @code{cmdline}
@end table

@node rsh_open procedure, rsh_download procedure, rlogin_spawn procedure, connprocs
@subsubsection rsh_open Procedure


@quotation
@t{@b{rsh_open}@{@i{hostname}@}}
@end quotation

@table @asis
@item @code{hostname}
@end table

@node rsh_download procedure, rsh_upload procedure, rsh_open procedure, connprocs
@subsubsection rsh_download Procedure


@quotation
@t{@b{rsh_download}@{@i{desthost}
@i{srcfile}
@i{destfile}@}}
@end quotation

@table @asis
@item @code{desthost}
@item @code{srcfile}
@item @code{destfile}
@end table

@node rsh_upload procedure, rsh_exec procedure, rsh_download procedure, connprocs
@subsubsection rsh_upload Procedure


@quotation
@t{@b{rsh_upload}@{@i{desthost}
@i{srcfile}
@i{destfile}@}}
@end quotation

@table @asis
@item @code{desthost}
@item @code{srcfile}
@item @code{destfile}
@end table

@node rsh_exec procedure, ssh_close procedure, rsh_upload procedure, connprocs
@subsubsection rsh_exec Procedure


@quotation
@t{@b{rsh_exec}@{@i{boardname}
@i{cmd}
@i{args}@}}
@end quotation

@table @asis
@item @code{boardname}
@item @code{cmd}
@item @code{args}
@end table

@node ssh_close procedure, ssh_exec procedure, rsh_exec procedure, connprocs
@subsubsection ssh_close procedure

@quotation
@t{@b{ssh_close} @{@i{desthost}@}}
@end quotation

@table @asis
@item @code{desthost}
@end table

@node ssh_exec procedure, ssh_download procedure, ssh_close procedure, connprocs
@subsubsection ssh_exec procedure

@quotation
@t{@b{ssh_exec}@{@i{boardname program pargs inp outp}@}}
@end quotation

@table @asis
@item @code{boardname}
@item @code{program}
@item @code{pargs}
@item @code{inp}
@item @code{outp}
@end table

@node ssh_download procedure, ssh_upload procedure, ssh_exec procedure, connprocs
@subsubsection ssh_download procedure

@quotation
@t{@b{ssh_download}@{@i{desthost srcfile destfile}@}}
@end quotation

@table @asis
@item @code{desthost}
@item @code{srcfile}
@item @code{destfile}
@end table

@node ssh_upload procedure, ftp_open procedure, ssh_download procedure, connprocs
@subsubsection ssh_upload procedure

@quotation
@t{@b{ssh_upload}@{@i{desthost srcfile destfile}@}}
@end quotation

@table @asis
@item @code{desthost}
@item @code{srcfile}
@item @code{destfile}
@end table

@node ftp_open procedure, ftp_upload procedure, ssh_upload procedure, connprocs
@subsubsection ftp_open Procedure

@quotation
@t{@b{ftp_open}@{@i{host}@}}
@end quotation

@table @asis

@item @code{host}
@end table

@node ftp_upload procedure, ftp_download procedure, ftp_open procedure, connprocs
@subsubsection ftp_upload Procedure


@quotation
@t{@b{ftp_upload}@{@i{host}
@i{remotefile}
@i{localfile}@}}
@end quotation

@table @asis
@item @code{host}
@item @code{remotefile}
@item @code{localfile}
@end table

@node ftp_download procedure, ftp_close procedure, ftp_upload procedure, connprocs
@subsubsection ftp_download Procedure


@quotation
@t{@b{ftp_download}@{@i{host}
@i{localfile}
@i{remotefile}@}}
@end quotation

@table @asis
@item @code{host}
@item @code{localfile}
@item @code{remotefile}
@end table

@node ftp_close procedure, tip_download procedure, ftp_download procedure, connprocs
@subsubsection ftp_close Procedure


@quotation
@t{@b{ftp_close}@{@i{host}@}}
@end quotation

@table @asis
@item @code{host}
@end table

@node tip_download procedure, , ftp_close procedure, connprocs
@subsubsection tip_download Procedure


@quotation
@t{@b{tip_download}@{@i{spawnid}
@i{file}@}}
@end quotation

@table @asis

@item @code{spawnid}
Download @code{file} to the process @code{spawnid} (the value returned
when the connection was established), using the @code{~put} command
under tip.  Most often used for single board computers that require
downloading programs in ASCII S-records.  Returns @emph{1} if an error
occurs, @emph{0} otherwise.

@item @code{file}
This is the filename to download.
@end table

@node Procedures For Target Boards, target database library file, connprocs, Builtin Procedures
@subsection Procedures For Target Boards


@menu
* default_link Procedure: default_link procedure
* default_target_assemble Procedure: default_target_assemble procedure
* default_target_compile Procedure: default_target_compile procedure
* pop_config Procedure: pop_config procedure
* prune_warnings Procedure: prune_warnings procedure
* push_build Procedure: push_build procedure
* push_config Procedure: push_config procedure
* reboot_target Procedure: reboot_target procedure
* target_assemble Procedure: target_assemble procedure
* target_compile Procedure: target_compile procedure
@end menu

@node default_link procedure, default_target_assemble procedure, , Procedures For Target Boards
@subsubsection default_link Procedure


@quotation
@t{@b{default_link}@{@i{board}
@i{objects}
@i{destfile}
@i{flags}@}}
@end quotation

@table @asis
@item @code{board}
@item @code{objects}
@item @code{destfile}
@item @code{flags}
@end table

@node default_target_assemble procedure, default_target_compile procedure, default_link procedure, Procedures For Target Boards
@subsubsection default_target_assemble Procedure


@quotation
@t{@b{default_target_assemble}@{@i{source}
@i{destfile}
@i{flags}@}}
@end quotation

@table @asis
@item @code{source}
@item @code{destfile}
@item @code{flags}
@end table

@node default_target_compile procedure, pop_config procedure, default_target_assemble procedure, Procedures For Target Boards
@subsubsection default_target_compile Procedure


@quotation
@t{@b{default_target_compile}@{@i{source}
@i{destfile}
@i{type}
@i{options}@}}
@end quotation

@table @asis
@item @code{source}
@item @code{destfile}
@item @code{type}
@item @code{options}
@end table

@node pop_config procedure, prune_warnings procedure, default_target_compile procedure, Procedures For Target Boards
@subsubsection pop_config Procedure

@quotation
@t{@b{pop_config}@{@i{type}@}}
@end quotation

@table @asis
@item @code{type}
@end table

@node prune_warnings procedure, push_build procedure, pop_config procedure, Procedures For Target Boards
@subsubsection prune_warnings Procedure


@quotation
@t{@b{prune_warnings}@{@i{text}@}}
@end quotation

@table @asis
@item @code{text}
@end table

@node push_build procedure, push_config procedure, prune_warnings procedure, Procedures For Target Boards
@subsubsection push_build Procedure


@quotation
@t{@b{push_build}@{@i{name}@}}
@end quotation

@table @asis
@item @code{name}
@end table

@node push_config procedure, reboot_target procedure, push_build procedure, Procedures For Target Boards
@subsubsection push_config Procedure


@quotation
@t{@b{push_config}@{@i{type}
@i{name}@}}
@end quotation

@table @asis
@item @code{type}

@item @code{name}
@end table

@node reboot_target procedure, target_assemble procedure, push_config procedure, Procedures For Target Boards
@subsubsection reboot_target Procedure

Reboot the target.

@quotation
@t{@b{reboot_target}}
@end quotation

@node target_assemble procedure, target_compile procedure, reboot_target procedure, Procedures For Target Boards
@subsubsection target_assemble Procedure


@quotation
@t{@b{target_assemble}@{@i{source destfile flags}@}}
@end quotation

@table @asis
@item @code{source}
@item @code{destfile}
@item @code{flags}
@end table

@node target_compile procedure, , target_assemble procedure, Procedures For Target Boards
@subsubsection target_compile Procedure


@quotation
@t{@b{target_compile}@{@i{source}
@i{destfile}
@i{type}
@i{options}@}}
@end quotation

@table @asis
@item @code{source}
@item @code{destfile}
@item @code{type}
@item @code{options}
@end table

@node target database library file, platform dependent procedures, Procedures For Target Boards, Builtin Procedures
@subsection Target Database Procedures

@menu
* board_info Procedure: board_info procedure
* host_info Procedure: host_info procedure
* set_board_info Procedure: set_board_info procedure
* add_board_info Procedure: add_board_info procedure
* set_currtarget_info Procedure: set_currtarget_info procedure
* target_info Procedure: target_info procedure
* unset_board_info Procedure: unset_board_info procedure
* unset_currtarget_info Procedure: unset_currtarget_info procedure
* push_target Procedure: push_target procedure
* pop_target Procedure: poptarget procedure
* list_targets Procedure: list_targets procedure
* push_host Procedure: push_host procedure
* pop_host Procedure: pop_host procedure
* compile Procedure: compile procedure
* archive Procedure: archive procedure
* ranlib Procedure: ranlib procedure
* execute_anywhere Procedure: execute_anywhere procedure
@end menu

@node board_info procedure, host_info procedure, , target database library file
@subsubsection board_info Procedure


@quotation
@t{@b{board_info}@{@i{machine}
@i{op}
@i{args}@}}
@end quotation

@table @asis
@item @code{machine}
@item @code{op}
@item @code{args}
@end table

@node host_info procedure, set_board_info procedure, board_info procedure, target database library file
@subsubsection host_info Procedure


@quotation
@t{@b{host_info}@{@i{op}
@i{args}@}}
@end quotation

@table @asis
@item @code{op}
@item @code{args}
@end table

@node set_board_info procedure, add_board_info procedure, host_info procedure, target database library file
@subsubsection set_board_info Procedure

This checks if @code{board_info} array's field
@emph{entry} has been set already and if not, then
sets it to @emph{value}.

@quotation
@t{@b{set_board_info}@{@i{entry}
@i{value}@}}
@end quotation

@table @asis

@item @code{entry}
The name of a @code{board_info} field
to operate on.

@item @code{value}
The value to set the field to.
@end table

@node add_board_info procedure, set_currtarget_info procedure, set_board_info procedure, target database library file
@subsubsection add_board_info Procedure

This treats @code{board_info} array's field
@emph{entry} as a TCL list and adds
@emph{value} at the end.

@quotation
@t{@b{add_board_info}@{@i{entry}
@i{value}@}}
@end quotation

@table @asis

@item @code{entry}
The name of a @code{board_info} field
to operate on.

@item @code{value}
The value to add to the field.
@end table

@node set_currtarget_info procedure, target_info procedure, add_board_info procedure, target database library file
@subsubsection set_currtarget_info Procedure


@quotation
@t{@b{set_currtarget_info}@{@i{entry}
@i{value}@}}
@end quotation

@table @asis
@item @code{entry}
@item @code{value}
@end table

@node target_info procedure, unset_board_info procedure, set_currtarget_info procedure, target database library file
@subsubsection target_info Procedure


@quotation
@t{@b{target_info}@{@i{op}
@i{args}@}}
@end quotation

@table @asis
@item @code{op}
@item @code{args}
@end table

@node unset_board_info procedure, unset_currtarget_info procedure, target_info procedure, target database library file
@subsubsection unset_board_info Procedure

This checks if @code{board_info} array's field
@emph{entry} has been set and if so, then removes
it.

@quotation
@t{@b{unset_board_info}@{@i{entry}@}}
@end quotation

@table @asis
@item @code{entry}
The name of a @code{board_info} field
to operate on.
@end table

@node unset_currtarget_info procedure, push_target procedure, unset_board_info procedure, target database library file
@subsubsection unset_currtarget_info Procedure


@quotation
@t{@b{unset_currtarget_info}@{@i{entry}@}}
@end quotation

@table @asis
@item @code{entry}
@end table

@node push_target procedure, poptarget procedure, unset_currtarget_info procedure, target database library file
@subsubsection push_target Procedure

This makes the target named @emph{name} be the
current target connection. The value of @emph{name} is
an index into the @code{target_info} array and is set in
the global config file.

@quotation
@t{@b{push_target}@{@i{name}@}}
@end quotation

@table @asis
@item @code{name}
The name of the target to make current
connection.
@end table

@node poptarget procedure, list_targets procedure, push_target procedure, target database library file
@subsubsection pop_target Procedure

This unsets the current target connection.

@quotation
@t{@b{pop_target}}
@end quotation

@node list_targets procedure, push_host procedure, poptarget procedure, target database library file
@subsubsection list_targets Procedure

This lists all the supported targets for this architecture.

@quotation
@t{@b{list_targets}}
@end quotation

@node push_host procedure, pop_host procedure, list_targets procedure, target database library file
@subsubsection push_host Procedure

This makes the host named @emph{name} be the
current remote host connection. The value of
@emph{name} is an index into the
@code{target_info} array and is set in the global config
file.

@quotation
@t{@b{push_host}@{@i{name}@}}
@end quotation

@table @asis
@item @code{name}
@end table

@node pop_host procedure, compile procedure, push_host procedure, target database library file
@subsubsection pop_host Procedure

This unsets the current host connection.

@quotation
@t{@b{pop_host}}
@end quotation

@node compile procedure, archive procedure, pop_host procedure, target database library file
@subsubsection compile Procedure

This invokes the compiler as set by CC to compile the file
@file{file}. The default options for many cross compilation targets are
@emph{guessed} by DejaGnu, and these options can be added to by passing
in more parameters as arguments to @code{compile}. Optionally, this will
also use the value of the @emph{cflags} field in the target config
array. If the host is not the same as the build machines, then then
compiler is run on the remote host using @code{execute_anywhere}.

@quotation
@t{@b{compile}@{@i{file}@}}
@end quotation

@table @asis
@item @code{file}
@end table

@node archive procedure, ranlib procedure, compile procedure, target database library file
@subsubsection archive Procedure

This produces an archive file. Any parameters passed to @code{archive}
are used in addition to the default flags. Optionally, this will also
use the value of the @emph{arflags} field in the target config array. If
the host is not the same as the build machines, then then archiver is
run on the remote host using @code{execute_anywhere}.

@quotation
@t{@b{archive}@{@i{file}@}}
@end quotation

@table @asis
@item @code{file}
@end table

@node ranlib procedure, execute_anywhere procedure, archive procedure, target database library file
@subsubsection ranlib Procedure

This generates an index for the archive file for systems that
aren't POSIX yet. Any parameters passed to @code{ranlib}
are used in for the flags.

@quotation
@t{@b{ranlib}@{@i{file}@}}
@end quotation

@table @asis
@item @code{file}
@end table

@node execute_anywhere procedure, , ranlib procedure, target database library file
@subsubsection execute_anywhere Procedure

This executes the @emph{cmdline} on the proper host. This should be used
as a replacement for the Tcl command @code{exec} as this version
utilizes the target config info to execute this command on the build
machine or a remote host. All config information for the remote host
must be setup to have this command work. If this is a Canadian cross
(where we test a cross compiler that runs on a different host then where
DejaGnu is running) then a connection is made to the remote host and the
command is executed there. It returns either REMOTERROR (for an error)
or the output produced when the command was executed. This is used for
running the tool to be tested, not a test case.

@quotation
@t{@b{execute_anywhere}@{@i{cmdline}@}}
@end quotation

@table @asis
@item @code{cmdline}
@end table

@node platform dependent procedures, Utility Procedures, target database library file, Builtin Procedures
@subsection Platform Dependent Procedures

Each combination of target and tool requires some target-dependent
procedures.  The names of these procedures have a common form: the tool
name, followed by an underscore @emph{_}, and finally a suffix
describing the procedure's purpose.  For example, a procedure to extract
the version from GDB is called @code{gdb_version}.

@code{runtest} itself calls only two of these procedures,
@code{$@{tool@}_exit} and @code{$@{tool@}_version}; these procedures use
no arguments.

The other two procedures, @code{$@{tool@}_start} and
@code{$@{tool@}_load}, are only called by the test suites themselves (or
by testsuite-specific initialization code); they may take arguments or
not, depending on the conventions used within each testsuite.

The usual convention for return codes from any of these procedures
(although it is not required by @code{runtest}) is to return @emph{0} if
the procedure succeeded, @emph{1} if it failed, and @emph{-1} if there
was a communication error.

@menu
* $@{tool@}_start Procedure: $@{tool@}_start procedure
* $@{tool@}_load Procedure: $@{tool@}_load procedure
* $@{tool@}_exit Procedure: $@{tool@}_exit procedure
* $@{tool@}_version Procedure: $@{tool@}_version procedure
@end menu

@node $@{tool@}_start procedure, $@{tool@}_load procedure, , platform dependent procedures
@subsubsection $@{tool@}_start Procedure

Starts a particular tool.  For an interactive tool,
@code{$@{tool@}_start} starts and initializes the tool, leaving the tool
up and running for the test cases; an example is @code{gdb_start}, the
start function for GDB. For a batch-oriented tool,
@code{$@{tool@}_start} is optional; the recommended convention is to let
@code{$@{tool@}_start} run the tool, leaving the output in a variable
called @code{comp_output}.  Test scripts can then analyze
@code{$comp_output} to determine the test results.  An example of this
second kind of start function is @code{gcc_start}, the start function
for GCC.

DejaGnu itself does not call @code{$@{tool@}_start}.  The initialization
module @code{$@{tool@}_init.exp} must call @code{$@{tool@}_start} for
interactive tools; for batch-oriented tools, each individual test script
calls @code{$@{tool@}_start} (or makes other arrangements to run the
tool).

@quotation
@t{@b{$@{tool@}_start}}
@end quotation

@node $@{tool@}_load procedure, $@{tool@}_exit procedure, $@{tool@}_start procedure, platform dependent procedures
@subsubsection $@{tool@}_load Procedure

Loads something into a tool. For an interactive tool, this conditions
the tool for a particular test case; for example, @code{gdb_load} loads
a new executable file into the debugger. For batch-oriented tools,
@code{$@{tool@}_load} may do nothing---though, for example, the GCC
support uses @code{gcc_load} to load and run a binary on the target
environment.  Conventionally, @code{$@{tool@}_load} leaves the output of
any program it runs in a variable called @code{$exec_output}. Writing
@code{$@{tool@}_load} can be the most complex part of extending DejaGnu
to a new tool or a new target, if it requires much communication coding
or file downloading. Test scripts call @code{$@{tool@}_load}.

@quotation
@t{@b{$@{tool@}_load}}
@end quotation

@node $@{tool@}_exit procedure, $@{tool@}_version procedure, $@{tool@}_load procedure, platform dependent procedures
@subsubsection $@{tool@}_exit Procedure

Cleans up (if necessary) before DejaGnu exits. For interactive tools,
this usually ends the interactive session.  You can also use
@code{$@{tool@}_exit} to remove any temporary files left over from the
tests. @code{runtest} calls @code{$@{tool@}_exit}.

@quotation
@t{@b{$@{tool@}_exit}}
@end quotation

@node $@{tool@}_version procedure, , $@{tool@}_exit procedure, platform dependent procedures
@subsubsection $@{tool@}_version Procedure

Prints the version label and number for @code{$@{tool@}}.  This is
called by the DejaGnu procedure that prints the final summary report.
The output should consist of the full path name used for the tested
tool, and its version number.

@quotation
@t{@b{$@{tool@}_version}}
@end quotation

@node Utility Procedures, Libgloss, platform dependent procedures, Builtin Procedures
@subsection Utility Procedures

@menu
* getdirs Procedure: getdirs procedure
* find Procedure: find procedure
* which Procedure: which procedure
* grep Procedure: grep procedure
* prune Procedure: prune procedure
* runtest_file_p Procedure: runtest_file_p procedure
* diff Procedure: diff procedure
* setenv Procedure: setenv procedure
* unsetenv Procedure: unsetenv procedure
* getenv Procedure: getenv procedure
* prune_system_crud Procedure: prune_system_crud procedure
@end menu

@node getdirs procedure, find procedure, , Utility Procedures
@subsubsection getdirs Procedure

Returns a list of all the directories in the single directory a single
directory that match an optional pattern.

@quotation
@t{@b{getdirs}@{@i{rootdir}
@i{pattern}@}}
@end quotation

@table @asis
@item @code{args}

@item @code{pattern}
If you do not specify
@code{pattern},
@code{Getdirs} assumes a default pattern of
@emph{*}. You may use the common shell
wildcard characters in the pattern. If no directories
match the pattern, then a NULL string is
returned.
@end table

@node find procedure, which procedure, getdirs procedure, Utility Procedures
@subsubsection find Procedure

Search for files whose names match @emph{pattern} (using shell wildcard
characters for filename expansion).  Search subdirectories recursively,
starting at @emph{rootdir}. The result is the list of files whose names
match; if no files match, the result is empty.  Filenames in the result
include all intervening subdirectory names. If no files match the
pattern, then a NULL string is returned.

@quotation
@t{@b{find}@{@i{rootdir}
@i{pattern}@}}
@end quotation

@table @asis

@item @code{rootdir}
The top level directory to search the search from.

@item @code{pattern}
A csh "glob" style regular expression representing the files to find.
@end table

@node which procedure, grep procedure, find procedure, Utility Procedures
@subsubsection which Procedure

Searches the execution path for an executable file @emph{binary}, like
the BSD @code{which} utility.  This procedure uses the shell environment
variable @emph{PATH}. It returns @emph{0} if the binary is not in the
path, or if there is no @emph{PATH} environment variable. If
@code{binary} is in the path, it returns the full path to @code{binary}.

@quotation
@t{@b{which}@{@i{file}@}}
@end quotation

@table @asis

@item @code{binary}
The executable program or shell script to look for.
@end table

@node grep procedure, prune procedure, which procedure, Utility Procedures
@subsubsection grep Procedure

Search the file called @file{filename} (a fully specified path) for
lines that contain a match for regular expression @emph{regexp}. The
result is a list of all the lines that match.  If no lines match, the
result is an empty string.  Specify @emph{regexp} using the standard
regular expression style used by the Unix utility program grep.

Use the optional third argument @emph{line} to start lines in the result
with the line number in @file{filename}.  (This argument is simply an
option flag; type it just as shown @code{--line}.)

@quotation
@t{@b{grep}@{@i{filename}
@i{regexp}
@i{--line}@}}
@end quotation

@table @asis

@item @code{filename}
The file to search.

@item @code{regexp}
The Unix style regular expression (as used by the
@code{grep} Unix utility) to search
for.

@item @code{--line}
Prefix the line number to each line where the
regexp matches.
@end table

@node prune procedure, runtest_file_p procedure, grep procedure, Utility Procedures
@subsubsection prune Procedure

This procedure is deprecated and will be removed in
the next release of DejaGnu.  If a testsuite uses this
procedure, a copy of the procedure should be made and placed
in the lib directory of the testsuite.

@node runtest_file_p procedure, diff procedure, prune procedure, Utility Procedures
@subsubsection runtest_file_p Procedure

Search @emph{runtest}s for
@emph{testcase} and return @emph{1} if
found, @emph{0} if not. @emph{runtests}
is a list of two elements.  The first is a copy of what was on
the right side of the @emph{=} if

@example
foo.exp="..."
@end example

was specified, or an empty string if no such argument is present. The
second is the pathname of the current testcase under consideration. This
is used by tools like compilers where each testcase is a file.

@quotation
@t{@b{runtest_file_p}@{@i{runtests}
@i{testcase}@}}
@end quotation

@table @asis

@item @code{runtests}
The list of patterns to compare against.

@item @code{testcase}
The test case filename.
@end table

@node diff procedure, setenv procedure, runtest_file_p procedure, Utility Procedures
@subsubsection diff Procedure

Compares the two files and returns a @emph{1} if they match, or a
@emph{0} if they don't. If @code{verbose} is set, then it'll print the
differences to the screen.

@quotation
@t{@b{diff}@{@i{file_1}
@i{file_2}@}}
@end quotation

@table @asis

@item @code{file_1}
The first file to compare.

@item @code{file_2}
The second file to compare.
@end table

@node setenv procedure, unsetenv procedure, diff procedure, Utility Procedures
@subsubsection setenv Procedure

Sets the environment variable @emph{var} to the value @emph{val}.

@quotation
@t{@b{setenv}@{@i{var}
@i{val}@}}
@end quotation

@table @asis

@item @code{var}
The environment variable to set.

@item @code{val}
The value to set the variable to.
@end table

@node unsetenv procedure, getenv procedure, setenv procedure, Utility Procedures
@subsubsection unsetenv Procedure

Unsets the environment variable
@emph{var}.

@quotation
@t{@b{unsetenv}@{@i{var}@}}
@end quotation

@table @asis

@item @code{var}
The environment variable to unset.
@end table

@node getenv procedure, prune_system_crud procedure, unsetenv procedure, Utility Procedures
@subsubsection getenv Procedure

Returns the value of @emph{var} in the
environment if it exists, otherwise it returns NULL.

@quotation
@t{@b{getenv}@{@i{var}@}}
@end quotation

@table @asis

@item @code{var}
The environment variable to get the value
of.
@end table

@node prune_system_crud procedure, , getenv procedure, Utility Procedures
@subsubsection prune_system_crud Procedure

For system @emph{system}, delete text the host or
target operating system might issue that will interfere with pattern
matching of program output in @emph{text}.  An example
is the message that is printed if a shared library is out of
date.

@quotation
@t{@b{prune_system_crud}@{@i{system}
@i{test}@}}
@end quotation

@table @asis

@item @code{system}
The system error messages to look for to screen out.

@item @code{text}
The Tcl variable containing the text.
@end table

@node Libgloss, Debugging Procedures, Utility Procedures, Builtin Procedures
@subsection Libgloss, a free board support package (BSP)

Libgloss is a free @dfn{BSP} (Board Support
Package) commonly used with GCC and G++ to produce a fully linked
executable image for an embedded systems.

@menu
* libgloss_link_flags Procedure: libgloss_link_flags procedure
* libgloss_include_flags Procedure: libgloss_include_flags procedure
* newlib_link_flags Procedure: newlib_link_flags procedure
* newlib_include_flags Procedure: newlib_include_flags procedure
* libio_include_flags Procedure: libio_include_flags procedure
* libio_link_flags Procedure: libio_link_flags procedure
* g++_include_flags Procedure: g++_include_flags procedure
* g++_link_flags Procedure: g++_link_flags procedure
* libstdc++_include_flags Procedure: libstdc++_include_flags procedure
* libstdc++_link_flags Procedure: libstdc++_link_flags procedure
* get_multilibs Procedure: get_multilibs procedure
* find_binutils_prog Procedure: find_binutils_prog procedure
* find_gcc Procedure: find_gcc procedure
* find_gcj Procedure: find_gcj procedure
* find_g++ Procedure: find_g++ procedure
* find_g77 Procedure: find_g77 procedure
* find_gfortran Procedure: find_gfortran procedure
* process_multilib_options Procedure: process_multilib_options procedure
* add_multilib_option Procedure: add_multilib_option procedure
* find_gas Procedure: find_gas procedure
* find_ld Procedure: find_ld procedure
* build_wrapper Procedure: build_wrapper procedure
* winsup_include_flags Procedure: winsup_include_flags procedure
* winsup_link_flags Procedure: winsup_link_flags procedure
@end menu

@node libgloss_link_flags procedure, libgloss_include_flags procedure, , Libgloss
@subsubsection libgloss_link_flags Procedure


@quotation
@t{@b{libgloss_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node libgloss_include_flags procedure, newlib_link_flags procedure, libgloss_link_flags procedure, Libgloss
@subsubsection libgloss_include_flags Procedure


@quotation
@t{@b{libgloss_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node newlib_link_flags procedure, newlib_include_flags procedure, libgloss_include_flags procedure, Libgloss
@subsubsection newlib_link_flags Procedure


@quotation
@t{@b{newlib_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node newlib_include_flags procedure, libio_include_flags procedure, newlib_link_flags procedure, Libgloss
@subsubsection newlib_include_flags Procedure


@quotation
@t{@b{newlib_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node libio_include_flags procedure, libio_link_flags procedure, newlib_include_flags procedure, Libgloss
@subsubsection libio_include_flags Procedure


@quotation
@t{@b{libio_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node libio_link_flags procedure, g++_include_flags procedure, libio_include_flags procedure, Libgloss
@subsubsection libio_link_flags Procedure


@quotation
@t{@b{libio_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node g++_include_flags procedure, g++_link_flags procedure, libio_link_flags procedure, Libgloss
@subsubsection g++_include_flags Procedure


@quotation
@t{@b{g++_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node g++_link_flags procedure, libstdc++_include_flags procedure, g++_include_flags procedure, Libgloss
@subsubsection g++_link_flags Procedure


@quotation
@t{@b{g++_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node libstdc++_include_flags procedure, libstdc++_link_flags procedure, g++_link_flags procedure, Libgloss
@subsubsection libstdc++_include_flags Procedure


@quotation
@t{@b{libstdc++_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node libstdc++_link_flags procedure, get_multilibs procedure, libstdc++_include_flags procedure, Libgloss
@subsubsection libstdc++_link_flags Procedure


@quotation
@t{@b{libstdc++_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node get_multilibs procedure, find_binutils_prog procedure, libstdc++_link_flags procedure, Libgloss
@subsubsection get_multilibs Procedure


@quotation
@t{@b{get_multilibs}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node find_binutils_prog procedure, find_gcc procedure, get_multilibs procedure, Libgloss
@subsubsection find_binutils_prog Procedure


@quotation
@t{@b{find_binutils_prog}@{@i{name}@}}
@end quotation

@table @asis
@item @code{name}
@end table

@node find_gcc procedure, find_gcj procedure, find_binutils_prog procedure, Libgloss
@subsubsection find_gcc Procedure


@quotation
@t{@b{find_gcc}}
@end quotation

@node find_gcj procedure, find_g++ procedure, find_gcc procedure, Libgloss
@subsubsection find_gcj Procedure


@quotation
@t{@b{find_gcj}}
@end quotation

@node find_g++ procedure, find_g77 procedure, find_gcj procedure, Libgloss
@subsubsection find_g++ Procedure


@quotation
@t{@b{find_g++}}
@end quotation

@node find_g77 procedure, find_gfortran procedure, find_g++ procedure, Libgloss
@subsubsection find_g77 Procedure


@quotation
@t{@b{find_g77}}
@end quotation

@node find_gfortran procedure, process_multilib_options procedure, find_g77 procedure, Libgloss
@subsubsection find_gfortran Procedure


@quotation
@t{@b{find_gfortran}}
@end quotation

@node process_multilib_options procedure, add_multilib_option procedure, find_gfortran procedure, Libgloss
@subsubsection process_multilib_options Procedure


@quotation
@t{@b{process_multilib_options}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node add_multilib_option procedure, find_gas procedure, process_multilib_options procedure, Libgloss
@subsubsection add_multilib_option Procedure


@quotation
@t{@b{add_multilib_option}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node find_gas procedure, find_ld procedure, add_multilib_option procedure, Libgloss
@subsubsection find_gas Procedure


@quotation
@t{@b{find_gas}}
@end quotation

@node find_ld procedure, build_wrapper procedure, find_gas procedure, Libgloss
@subsubsection find_ld Procedure


@quotation
@t{@b{find_ld}}
@end quotation

@node build_wrapper procedure, winsup_include_flags procedure, find_ld procedure, Libgloss
@subsubsection build_wrapper Procedure


@quotation
@t{@b{build_wrapper}@{@i{gluefile}@}}
@end quotation

@table @asis
@item @code{gluefile}
@end table

@node winsup_include_flags procedure, winsup_link_flags procedure, build_wrapper procedure, Libgloss
@subsubsection winsup_include_flags Procedure


@quotation
@t{@b{winsup_include_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node winsup_link_flags procedure, , winsup_include_flags procedure, Libgloss
@subsubsection winsup_link_flags Procedure


@quotation
@t{@b{winsup_link_flags}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node Debugging Procedures, , Libgloss, Builtin Procedures
@subsection Procedures for debugging your scripts

@file{lib/debugger.exp} defines the following procedures:

@menu
* dumpvars Procedure: dumpvars procedure
* dumplocals Procedure: dumplocals procedure
* dumprocs Procedure: dumprocs procedure
* dumpwatch Procedure: dumpwatch procedure
* watcharray Procedure: watcharray procedure
* watchvar Procedure: watchvar procedure
* watchunset Procedure: watchunset procedure
* watchwrite Procedure: watchwrite procedure
* watchread Procedure: watchread procedure
* watchdel Procedure: watchdel procedure
* print Procedure: print procedure
* quit Procedure: quit procedure
@end menu

@node dumpvars procedure, dumplocals procedure, , Debugging Procedures
@subsubsection dumpvars Procedure

This takes a csh style regular expression (glob rules) and prints
the values of the global variable names that match.  It is abbreviated
as @emph{dv}.

@quotation
@t{@b{dumpvars}@{@i{vars}@}}
@end quotation

@table @asis
@item @code{vars}
The variables to dump.
@end table

@node dumplocals procedure, dumprocs procedure, dumpvars procedure, Debugging Procedures
@subsubsection dumplocals Procedure

This takes a csh style regular expression (glob rules) and
prints the values of the local variable names that match. It is
abbreviated as @emph{dl}.

@quotation
@t{@b{dumplocals}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node dumprocs procedure, dumpwatch procedure, dumplocals procedure, Debugging Procedures
@subsubsection dumprocs Procedure

This takes a csh style regular expression (glob rules) and
prints the body of all procs that match. It is abbreviated as
@emph{dp}.

@quotation
@t{@b{dumprocs}@{@i{pattern}@}}
@end quotation

@table @asis
@item @code{pattern}
The csh "glob" style pattern to look
for.
@end table

@node dumpwatch procedure, watcharray procedure, dumprocs procedure, Debugging Procedures
@subsubsection dumpwatch Procedure

This takes a csh style regular expression (glob rules) and
prints all the watchpoints. It is abbreviated as
@emph{dw}.

@quotation
@t{@b{dumpwatch}@{@i{pattern}@}}
@end quotation

@table @asis
@item @code{pattern}
The csh "glob" style pattern to look
for.
@end table

@node watcharray procedure, watchvar procedure, dumpwatch procedure, Debugging Procedures
@subsubsection watcharray Procedure


@quotation
@t{@b{watcharray}@{@i{element}
@i{type}@}}
@end quotation

@table @asis
@item @code{type}
The csh "glob" style pattern to look
for.
@end table

@node watchvar procedure, watchunset procedure, watcharray procedure, Debugging Procedures
@subsubsection watchvar Procedure


@quotation
@t{@b{watchvar}@{@i{var}
@i{type}@}}
@end quotation

@table @asis
@item @code{}
@end table

@node watchunset procedure, watchwrite procedure, watchvar procedure, Debugging Procedures
@subsubsection watchunset Procedure

This breaks program execution when the variable @code{var} is unset. It
is abbreviated as @emph{wu}.

@quotation
@t{@b{watchunset}@{@i{arg}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node watchwrite procedure, watchread procedure, watchunset procedure, Debugging Procedures
@subsubsection watchwrite Procedure

This breaks program execution when the variable
@code{var} is written. It is abbreviated as
@emph{ww}.

@quotation
@t{@b{watchwrite}@{@i{var}@}}
@end quotation

@table @asis
@item @code{var}
The variable to watch.
@end table

@node watchread procedure, watchdel procedure, watchwrite procedure, Debugging Procedures
@subsubsection watchread Procedure

This breaks program execution when the variable @code{var} is read. It
is abbreviated as @emph{wr}.

@quotation
@t{@b{watchread}@{@i{var}@}}
@end quotation

@table @asis
@item @code{var}
The variable to watch.
@end table

@node watchdel procedure, print procedure, watchread procedure, Debugging Procedures
@subsubsection watchdel Procedure

This deletes a watchpoint from the watch list. It is
abbreviated as @emph{wd}.

@quotation
@t{@b{watchdel}@{@i{args}@}}
@end quotation

@table @asis
@item @code{args}
@end table

@node print procedure, quit procedure, watchdel procedure, Debugging Procedures
@subsubsection print Procedure

This prints the value of the variable @code{var}. It is abbreviated as
@emph{p}.

@quotation
@t{@b{print}@{@i{var}@}}
@end quotation

@table @asis
@item @code{var}
@end table

@node quit procedure, , print procedure, Debugging Procedures
@subsubsection quit Procedure

This makes runtest exit. It is abbreviated as
@emph{q}.

@quotation
@t{@b{quit}}
@end quotation

@table @asis
@item @code{}
@end table

@bye
